{"title":"Syntax and R Basics","markdown":{"yaml":{"title":"Syntax and R Basics","engine":"knitr","format":"live-html","webr":{"packages":["dplyr","lubridate","stringr","readr","gradethis"]},"resources":["images"]},"headingText":"Data types","containsRefs":false,"markdown":"\n\n{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}\n{{< include ../_extensions/r-wasm/live/_gradethis.qmd >}}\n\n\n```{webr 2}\n#| include: false\n#| \n\n\nm <- \"apples\"\n\nsample_df <- data.frame(id=c(1001,1002,1003,1004), name=c(\"Steve\", \"Pam\", \"Jim\", \"Dwight\"), age=c(26, 65, 15, 7), race=c(\"White\", \"Black\", \"White\", \"Hispanic\"))\nsample_df$race <- factor(sample_df$race)\nsample_df$id <- factor(sample_df$id)\nsample_df$name <- as.character(sample_df$name)\n\n\nyears <- c(301, 978, 101)\n\nburgers <- data.frame(id=c(60006,60007,60008,60009, 60010), name=c(\"Bob\", \"Linda\", \"Louise\", \"Tina\", \"Gene\"), age=c(45, 44, 12, 13, 11), shirt=c(\"White\", \"Red\", \"Pink\", \"Blue\", \"Yellow\"))\nburgers$shirt<- factor(burgers$shirt)\nburgers$id <- factor(burgers$id)\nburgers$name <- as.character(burgers$name)\n\nmat <- matrix(data=c(9,2,3,4,5,6), ncol=3)\n\npatientID <- c(111, 208, 113, 408)\nage <- c(25, 34, 28, 52)\nsex <- c(1,2,1,1)\ndiabetes <- c(\"Type1\", \"Type2\", \"Type1\", \"Type1\")\nstatus <- c(1,2,3,1)\n\npatientdata <- data.frame(patientID, age, sex, diabetes, status)\n```\n\n\n```{webr 3}\n#| edit: false\n#| output: false\n#| define:\n#|   - ok_reponse\nlibrary(htmltools)\n\nok_reponse <- function(reponse, n) {\n  if (is.na(reponse)) HTML(\"\")\n  else if (reponse == n) div(HTML(\"Correct ✓\"), style = \"color: green\")\n  else div(HTML(\"Incorrect ✗\"), style = \"color: red\")\n}\n```\n\n\nThere's more to data than just numbers, which is what we've been working with in part 1.\n\nBut sometimes data we work with can be specified as something else, like characters and strings (text and sentences) or Boolean values like **TRUE** or **FALSE** or even dates.\n\n## Characters\n\nLet's assign \"apples\" to m.\n\n\n\n```{webr 4}\nm <- \"apples\"\nm\n```\n\nTo tell R that something is a character string, you should type the text between apostrophes, otherwise R will start looking for a defined variable with the same name. See what happens.\n\n```{webr 5}\nn <- pears\n```\n\n\n**Because there was no \" around `pears` then R assumed that `pears` was an object to be found in the `Environment`.** And you were trying to also assign an object named `n` the same value as what you had assigned to `pears`. But it didn't exist in the environment so it failed.\n\nThat's why `\"` around characters are important.\n\nYou can't do math with characters, either\n\n```{webr 6}\nm + 2\n```\n\n## Dates\n\nDates and times are complicated. \n\nR has to know that 3 o'clock comes after 2:59 and that February has 29 days in some years.\n\nThe base way to tell R that something is a date-time combination is with the function `strptime()` **Note: This is the complicated way**\n\n```{webr 7}\ndate1 <- strptime(c(\"20100225230000\", \"20100226000000\", \"20100226010000\"), format=\"%Y%m%d%H%M%S\")\ndate1\n```\n\n\nA vector is created with `c()` and the numbers between the quotation marks are strings, because that's what the `strptim()` function requires.\n\nThat's followed by the argument **format** that defines how the character string should be read. In this instance, the year is denoted first (%Y), then the month (%M) and second (%S). You don't have to specify all of them, as long as the format corresponds to the character string.\n\n\n\nIn this course, we'll be using a less messy way to deal with dates using the package **lubridate**.\n\n```{webr 8}\n# If you don't currently have the lubridate package installed, uncomment the line below and run it\n\n# install.packages(\"lubridate\")\n\nlibrary(lubridate)\n\ndate1 <- ymd_hms(c(\"20100225230000\", \"20100226000000\", \"20100226010000\"))\n```\n\n\nThe function `ymd_hms()` converted the year, month, date and hour, minutes, and seconds in the string. You can go over this in more detail on [lubridate's website](https://lubridate.tidyverse.org/articles/lubridate.html).\n\n## Factors\n\nOkay, these are kinda complicated. They're like text but in order. All R sees is the order, not the text.\n\n* Data structure specifying categorical (nominal) or ordered categorical (ordinal) variables\n*\tTells R how to handle that variable in analyses\n*\tVery important and misunderstood\n* Any variable that is categorical or ordinal should usually be stored as a factor.\n\nFor example, Race might be input as \"White\", \"Black\", and \"Hispanic\"\n\nWhen importing that data in from a spreadsheet, R will most often interpret it as a **Factor**.\n\nRun these lines of code to create a new object, a dataframe called **sample_df**\n\n```{webr 9}\nsample_df <- data.frame(id=c(1001,1002,1003,1004), name=c(\"Steve\", \"Pam\", \"Jim\", \"Dwight\"), age=c(26, 65, 15, 7), race=c(\"White\", \"Black\", \"White\", \"Hispanic\"))\nsample_df$race <- factor(sample_df$race)\nsample_df$id <- factor(sample_df$id)\nsample_df$name <- as.character(sample_df$name)\n\nsample_df\n```\n\n\n[](images/sample_df.png?class=shadow){width=40%}\n\nLet's take a look at the structure behind a dataframe we've created.\n\nWe'll use the function `str()` which is short for **structure**.\n\n```{webr 10}\nstr(sample_df)\n```\n\nR sees that the **Race** column is a factor variable with three levels.\n\nDo you see the `3 1 3 2` numbers at the end of the line?\n\n```{webr 11}\nlevels(sample_df$race)\n```\n\n\nThis means that R groups statistics by these levels.\n\n```{webr 12}\nsummary(sample_df$race)\n```\n\n\nInternally, R stores the integer values 1, 2, and 3, and maps the character strings in alphabetical order to these values. 1=Black, 2=Hispanic, and 3=White.\n\nWhy is this important to know?\n\nJournalists are less concerned by factors and will often find themselves converting factors to strings and characters. But when you reach the point that you are wanting to create models and linear regressions then you'll be happy that it's an option.\n\n\n*Most odd quirks when it comes to R can be traced back to the fact that R was created by and for statisticians. R has grown a lot since then and the community has helped make it evolve to handle data the way we are more used to. But some habits die hard and are ingrained.*\n\n## Converting between the different types\n\nHere's a warning.\n\n* You can convert factors into strings.\n\n```{webr 13}\nsample_df$race\nas.character(sample_df$race)\n```\n\n\n* You can convert strings into factors\n\n```{webr 14}\nsample_df$name\nfactor(sample_df$name)\n```\n\n* You **cannot** convert factors into numbers.\n\n```{webr 15}\nsample_df$id\nas.numeric(sample_df$id)\n```\n\nBecause R stores **Factors** as **Integer** values.\n\nYou must convert factors into characters first *before* converting it to numbers.\n\nSo you can nest it.\n\n```{webr 16}\nsample_df$id\nas.numeric(as.character(sample_df$id))\n```\n\n*It's okay if you don't fully understand this next section. It's pretty advanced. I give you permission to skip down to **Your turn:**.*\n\n\n## Vectors\n\nA **vector** is a sequence of data elements of the same basic type. The parts that consist of a vector are called **components** or **elements**.\n\n```{webr 17}\nvec1 <- c(1,4,6,8,10)\nvec1\n```\n\nA vector `vec` is explicitly constructed by the concatenation function `c()`.\n\n```{webr 18}\nvec1[5]\n```\n\nElements in vectors can be addressed by standard `[i]` indexing\n\n```{webr 19}\nvec1[3] <- 12\nvec1\n```\n\nOne of the elements in the array is replaced with a new number. \n\n```{webr 20}\nvec2 <- seq(from=0, to=1, by=0.25)\nvec2\n```\n\nThis shows another useful way of creating a vector: the `seq()` or sequence function.\n\n```{webr 21}\nsum(vec1)\n```\n\n\n## Your turn\n\n\nChallenge yourself with some exercises.\n\n### Objects\n\nAssign the number 17 to the object `ub`.\n\n```{webr yourturn1a}\n#| exercise: ex_1\nub __ __\n\nub\n```\n\n::: {.solution exercise=\"ex_1\"}\n\n#### Solution\n\n`<-` is the assigner code\n\n\n```{webr yourturn1b}\n#| exercise: ex_1\n#| solution: true\nub <- 17\n\nub\n```\n\n:::\n\n```{webr yourturn1c}\n#| exercise: ex_1\n#| check: true\ngradethis::grade_this_code()\n```\n\n\n### Vectors\n\nCreate an array of numbers: 301, 978, and 101.\n\nAssign it to the object `years`.\n\n\n```{webr ar1a}\n#| exercise: ex_2\nyears #replace this with your code \n\nyears\n```\n\n```{webr ar1b}\n#| exercise: ex_2\n#| solution: true\nyears <- c(301, 978, 101)\n\nyears\n```\n\n```{webr ar1c}\n#| exercise: ex_2\n#| check: true\ngradethis::grade_this_code()\n```\n\n\n\n### Functions\n\nWhat’s the average of the array of numbers assigned to `years`”`?\n\n\n```{webr fu1}\n#| exercise: fu1\n    (years)\n\n# what function() gives you the average? or another word for average?\n```\n\n```{webr fu1-solution}\n#| exercise: fu1\n#| solution: true\nmean(years)\n```\n\n```{webr fu1-check}\n#| exercise: fu1\n#| check: true\ngradethis::grade_this_code()\n```\n\n## Classes\n\nTake a look at the structure of the object `burgers`:\n\n```{webr burgers, exercise=TRUE}\n#| exercise: burgers\n   (burgers)\n#do you remember what the name of the function is to look at the structure of an object in R?\n```\n\n```{webr burgers-solution}\n#| exercise: burgers\n#| solution: TRUE\nstr(burgers)\n```\n\n```{webr burgers-check}\n#| exercise: burgers\n#| check: true\ngradethis::grade_this_code()\n```\n\n**What kind of class is the variable id?**\n\n```{ojs}\n//| echo: false\nmutable ok_reponse = (reponse, n) => { return html`Loading...` };\nviewof reponse = Inputs.radio(\n  new Map([\n    [\"character\", 1],\n    [\"number\", 2],\n    [\"factor\", 3],\n    [\"date\", 4]\n  ])\n);\nok_reponse(reponse, 3);\n```\n\n\n## Matrices\n\n**Matrices** are two-dimensional vectors.\n\nIt looks like this.\n\n```{webr matrix}\nmat <- matrix(data=c(9,2,3,4,5,6), ncol=3)\nmat\n```\n\nThe argument `data` specifies which numbers should be in the matrix.\n\nUse either `ncol` to specify the number of columns or `nrow` to specify the number of rows.\n\nMatrix operations are similar to vector operations.\n\nTake a look at the output. Do you notice the numbers and commas in brackets that look like [1,] or [,2]?\n\nIf you've ever played [Battleship](https://www.incpartservices.com/wp-content/uploads/2019/06/battleship.jpeg) then those numbers represent coordinates in the grid. It's always **[R(ow),C(column)]**. I remember it as \"Let's get ready to **[Ro,Ck]**\n\nFor example: \n\n```{webr matrix2}\nmat[1,2]\n```\n\nThis is a Base R method to pull the value from the first row and second column in the grid, which is **3**.\n\nElements of a matrix can be addressed in the usual way.\n\n```{webr matrix3}\nmat[2,1]\n```\n\nWhen you want to select a whole row, you leave the spot for the column number empty and vice versa for the columns.\n\n```{webr matrix4}\nmat[,3]\n```\n\n## Data frames\n\nIf you're used to working with spreadsheets, then *data frames* will make the most sense to you in R.\n\nThis is how to create a data frame from vectors. You don't have to fully understand this at this point-- the data you'll be working with will come pre-structured if you're importing spreadsheets.\n\n\n```{webr df1}\npatientID <- c(111, 208, 113, 408)\nage <- c(25, 34, 28, 52)\nsex <- c(1,2,1,1)\ndiabetes <- c(\"Type1\", \"Type2\", \"Type1\", \"Type1\")\nstatus <- c(1,2,3,1)\n\npatientdata <- data.frame(patientID, age, sex, diabetes, status)\npatientdata\n```\n\nBut this is what's happening. A set of vectors are being created and a function called `data.frame()` joins them together into a data frame structure.\n\nWhat if we only want to columns: `patientID` and `age`?\n\n**How to pull elements from a data frame:**\n\nThere are several ways, but one way is to know what number columns they are in the dataframe (kind of like the Battleship method). We know `patientID` and `age` are columns 1 and 2. \n\nThis is how to narrow down to those columns only:\n\n```{webr}\n# a : means \"through\"\npatientdata[1:2]\n\n# So 1:2 means 1 through 2\n```\n\nAnother way is if you know the column names.\n\nThe Base R way involves using `c()` and brackets.\n\n```{webr}\npatientdata[c(\"diabetes\", \"status\")]\n```\n\n## Dollar signs\n\nIf you want to look at a specific vector in a dataframe, then you can get to it by first typing out the dataframe object name and column name separated by a `$` sign.\n\n```{webr}\npatientdata$age\n```\n\n**Doing math on vectors in a dataframe:**\n\nInstead of using `mean(patientdata[,2])`, you can select the column `age` from the `patientdata` data frame with the `$` sign.\n\n```{webr}\nmean(patientdata$age)\n```\n\n## Lists\n\nAnother basic structure in R is a *list*. \n\nThe main advantage of lists is that the \"columns\" they're not really ordered in columns any more, but are more of a collection of vectors) don't have to be of the same length, unlike matrices and data frames.\n\nKind of like JSON files are structured.\n\n```{webr}\ng <- \"My First List\"\nh <- c(25, 26, 18, 39)\n# The line below is creating a matrix that's 5 rows deep of numbers 1 through(\":\") 10\nj <- matrix(1:10, nrow = 5) \nk <- c(\"one\", \"two\", \"three\")\nmylist <- list(title = g, ages = h, j, k)   \n```\n\nThis is how a list would appear in the work space\n\n```{webr}\nnames(mylist)\n```\n\nHow to find out what's in the list\n\n```{webr}\nmylist[[2]] \n\nmylist[[\"ages\"]][[1]]\n```\n\nThe code above extracts data from the list\n\n```{webr}\nmylist$age + 10\n```\n\nHow to refer to and use the numbers in the example list\n\n## Functions applied to dataframes\n\nLet's start with the `sample_df` dataframe again below.\n\n```{webr}\n# Run the lines of code below\nsample_df <- data.frame(id=c(1001,1002,1003,1004), name=c(\"Steve\", \"Pam\", \"Jim\", \"Dwight\"), age=c(26, 65, 15, 7), race=c(\"White\", \"Black\", \"White\", \"Hispanic\"))\nsample_df$name <- as.character(sample_df$name)\nsample_df\n```\n\n**The following functions may not seem like they have much use now but we're going to need to understand them by week 3 when we do more advanced R programming.**\n\n`length(x)` - Find out how many things there are in an object or array\n\n```{webr}\nlength(sample_df$name)\n```\n\n`nchar(x)` - If **x** is a string, finds how how many characters there are \n\n```{webr}\nsample_df$name[1]\nnchar(sample_df$name[1])\n```\n\n`dim(x)` - Gives the dimensions of **x**\n```{webr}\ndim(sample_df)\n```\n\n`ncol(x)` - Counts the number of columns\n\n```{webr ncol}\nncol(sample_df)\n```\n\n`nrow(x)` - Returns the number of rows of **x**\n\n```{webr nrow}\nnrow(sample_df)\n```\n\n`str(x)` - Returns the structure of **x**\n\n```{webr str}\nstr(sample_df)\n```\n\n`summary(x)` - Summarizes the object as understood by R\n\n```{webr}\nsummary(sample_df)\n```\n\n\n`View(x)` - A command to open the object to browse in RStudio\n\nThis won't work through this browser exercise, but it's nice to have for later when you're working in RStudio.\n\n```{r view, eval=F}\nView(sample_df)\n```\n\n`rm(x)` - Removes **x**\n\n```{webr}\nrm(sample_df)\nsample_df\n```\n\n## Your turn again\n\n### Pulling a column of data\n\nConsider this data frame **burgers**\n\n```{webr burger_show}\nburgers\n```\n\nHow do you refer to the the *shirt* variable/column with the bracket method **[]**?\n\n\n```{webr v1}\n#| exercise: v1\n# Add to the line below \nburgers\n```\n\n```{webr v1-solution}\n#| exercise: v1\n#| solution: true\nburgers[,4]\n```\n\n```{webr v1-check}\n#| exercise: v1\n#| check: true\ngradethis::grade_this_code()\n```\n\nHow do you refer to the the *shirt* variable/column with $?\n\n```{webr v2}\n#| exercise: v2\n\n# Add to the line below \nburgers\n```\n\n```{webr v2-solution}\n#| exercise: v2\n#| solution: true\nburgers$shirt\n\n```\n\n```{webr v2-check}\n#| exercise: v2\n#| check: true\ngradethis::grade_this_code()\n``` \n\n\n\n### Pulling a row of data\n\nExtract entire row for Linda using [].\n\n```{webr v4}\n#| exercise: v4\n\n# Add to the line below \nburgers\n```\n\n\n```{webr v4-solution}\n#| exercise: v4\n#| solution: true\nburgers[2,]\n```   \n\n```{webr v4-check}\n#| exercise: v4\n#| check: true\ngradethis::grade_this_code()\n```   \n\n\n### Converting data classes\n\nConvert the *id* variable of the **burgers** data frame to numeric.\n\n\n```{webr v3}\n#| exercise: v3\n# Add to the line below \nburgers$id <- \nburgers$id\nclass(burgers$id)\n```\n\n\n```{webr v3-solution}\n#| exercise: v3\n#| solution: true\nburgers$id <- as.numeric(as.character(burgers$id))\nburgers$id\nclass(burgers$id)\n```   \n\n\n```{webr v3-check}\n#| exercise: v3\n#| check: true\ncheck_this_code()\n```   \n\n\n*Note:* Is the answer the same as above (correct) or is it 1-5 (false)? \n\n","srcMarkdownNoYaml":"\n\n{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}\n{{< include ../_extensions/r-wasm/live/_gradethis.qmd >}}\n\n\n```{webr 2}\n#| include: false\n#| \n\n\nm <- \"apples\"\n\nsample_df <- data.frame(id=c(1001,1002,1003,1004), name=c(\"Steve\", \"Pam\", \"Jim\", \"Dwight\"), age=c(26, 65, 15, 7), race=c(\"White\", \"Black\", \"White\", \"Hispanic\"))\nsample_df$race <- factor(sample_df$race)\nsample_df$id <- factor(sample_df$id)\nsample_df$name <- as.character(sample_df$name)\n\n\nyears <- c(301, 978, 101)\n\nburgers <- data.frame(id=c(60006,60007,60008,60009, 60010), name=c(\"Bob\", \"Linda\", \"Louise\", \"Tina\", \"Gene\"), age=c(45, 44, 12, 13, 11), shirt=c(\"White\", \"Red\", \"Pink\", \"Blue\", \"Yellow\"))\nburgers$shirt<- factor(burgers$shirt)\nburgers$id <- factor(burgers$id)\nburgers$name <- as.character(burgers$name)\n\nmat <- matrix(data=c(9,2,3,4,5,6), ncol=3)\n\npatientID <- c(111, 208, 113, 408)\nage <- c(25, 34, 28, 52)\nsex <- c(1,2,1,1)\ndiabetes <- c(\"Type1\", \"Type2\", \"Type1\", \"Type1\")\nstatus <- c(1,2,3,1)\n\npatientdata <- data.frame(patientID, age, sex, diabetes, status)\n```\n\n\n```{webr 3}\n#| edit: false\n#| output: false\n#| define:\n#|   - ok_reponse\nlibrary(htmltools)\n\nok_reponse <- function(reponse, n) {\n  if (is.na(reponse)) HTML(\"\")\n  else if (reponse == n) div(HTML(\"Correct ✓\"), style = \"color: green\")\n  else div(HTML(\"Incorrect ✗\"), style = \"color: red\")\n}\n```\n\n# Data types\n\nThere's more to data than just numbers, which is what we've been working with in part 1.\n\nBut sometimes data we work with can be specified as something else, like characters and strings (text and sentences) or Boolean values like **TRUE** or **FALSE** or even dates.\n\n## Characters\n\nLet's assign \"apples\" to m.\n\n\n\n```{webr 4}\nm <- \"apples\"\nm\n```\n\nTo tell R that something is a character string, you should type the text between apostrophes, otherwise R will start looking for a defined variable with the same name. See what happens.\n\n```{webr 5}\nn <- pears\n```\n\n\n**Because there was no \" around `pears` then R assumed that `pears` was an object to be found in the `Environment`.** And you were trying to also assign an object named `n` the same value as what you had assigned to `pears`. But it didn't exist in the environment so it failed.\n\nThat's why `\"` around characters are important.\n\nYou can't do math with characters, either\n\n```{webr 6}\nm + 2\n```\n\n## Dates\n\nDates and times are complicated. \n\nR has to know that 3 o'clock comes after 2:59 and that February has 29 days in some years.\n\nThe base way to tell R that something is a date-time combination is with the function `strptime()` **Note: This is the complicated way**\n\n```{webr 7}\ndate1 <- strptime(c(\"20100225230000\", \"20100226000000\", \"20100226010000\"), format=\"%Y%m%d%H%M%S\")\ndate1\n```\n\n\nA vector is created with `c()` and the numbers between the quotation marks are strings, because that's what the `strptim()` function requires.\n\nThat's followed by the argument **format** that defines how the character string should be read. In this instance, the year is denoted first (%Y), then the month (%M) and second (%S). You don't have to specify all of them, as long as the format corresponds to the character string.\n\n\n\nIn this course, we'll be using a less messy way to deal with dates using the package **lubridate**.\n\n```{webr 8}\n# If you don't currently have the lubridate package installed, uncomment the line below and run it\n\n# install.packages(\"lubridate\")\n\nlibrary(lubridate)\n\ndate1 <- ymd_hms(c(\"20100225230000\", \"20100226000000\", \"20100226010000\"))\n```\n\n\nThe function `ymd_hms()` converted the year, month, date and hour, minutes, and seconds in the string. You can go over this in more detail on [lubridate's website](https://lubridate.tidyverse.org/articles/lubridate.html).\n\n## Factors\n\nOkay, these are kinda complicated. They're like text but in order. All R sees is the order, not the text.\n\n* Data structure specifying categorical (nominal) or ordered categorical (ordinal) variables\n*\tTells R how to handle that variable in analyses\n*\tVery important and misunderstood\n* Any variable that is categorical or ordinal should usually be stored as a factor.\n\nFor example, Race might be input as \"White\", \"Black\", and \"Hispanic\"\n\nWhen importing that data in from a spreadsheet, R will most often interpret it as a **Factor**.\n\nRun these lines of code to create a new object, a dataframe called **sample_df**\n\n```{webr 9}\nsample_df <- data.frame(id=c(1001,1002,1003,1004), name=c(\"Steve\", \"Pam\", \"Jim\", \"Dwight\"), age=c(26, 65, 15, 7), race=c(\"White\", \"Black\", \"White\", \"Hispanic\"))\nsample_df$race <- factor(sample_df$race)\nsample_df$id <- factor(sample_df$id)\nsample_df$name <- as.character(sample_df$name)\n\nsample_df\n```\n\n\n[](images/sample_df.png?class=shadow){width=40%}\n\nLet's take a look at the structure behind a dataframe we've created.\n\nWe'll use the function `str()` which is short for **structure**.\n\n```{webr 10}\nstr(sample_df)\n```\n\nR sees that the **Race** column is a factor variable with three levels.\n\nDo you see the `3 1 3 2` numbers at the end of the line?\n\n```{webr 11}\nlevels(sample_df$race)\n```\n\n\nThis means that R groups statistics by these levels.\n\n```{webr 12}\nsummary(sample_df$race)\n```\n\n\nInternally, R stores the integer values 1, 2, and 3, and maps the character strings in alphabetical order to these values. 1=Black, 2=Hispanic, and 3=White.\n\nWhy is this important to know?\n\nJournalists are less concerned by factors and will often find themselves converting factors to strings and characters. But when you reach the point that you are wanting to create models and linear regressions then you'll be happy that it's an option.\n\n\n*Most odd quirks when it comes to R can be traced back to the fact that R was created by and for statisticians. R has grown a lot since then and the community has helped make it evolve to handle data the way we are more used to. But some habits die hard and are ingrained.*\n\n## Converting between the different types\n\nHere's a warning.\n\n* You can convert factors into strings.\n\n```{webr 13}\nsample_df$race\nas.character(sample_df$race)\n```\n\n\n* You can convert strings into factors\n\n```{webr 14}\nsample_df$name\nfactor(sample_df$name)\n```\n\n* You **cannot** convert factors into numbers.\n\n```{webr 15}\nsample_df$id\nas.numeric(sample_df$id)\n```\n\nBecause R stores **Factors** as **Integer** values.\n\nYou must convert factors into characters first *before* converting it to numbers.\n\nSo you can nest it.\n\n```{webr 16}\nsample_df$id\nas.numeric(as.character(sample_df$id))\n```\n\n*It's okay if you don't fully understand this next section. It's pretty advanced. I give you permission to skip down to **Your turn:**.*\n\n\n## Vectors\n\nA **vector** is a sequence of data elements of the same basic type. The parts that consist of a vector are called **components** or **elements**.\n\n```{webr 17}\nvec1 <- c(1,4,6,8,10)\nvec1\n```\n\nA vector `vec` is explicitly constructed by the concatenation function `c()`.\n\n```{webr 18}\nvec1[5]\n```\n\nElements in vectors can be addressed by standard `[i]` indexing\n\n```{webr 19}\nvec1[3] <- 12\nvec1\n```\n\nOne of the elements in the array is replaced with a new number. \n\n```{webr 20}\nvec2 <- seq(from=0, to=1, by=0.25)\nvec2\n```\n\nThis shows another useful way of creating a vector: the `seq()` or sequence function.\n\n```{webr 21}\nsum(vec1)\n```\n\n\n## Your turn\n\n\nChallenge yourself with some exercises.\n\n### Objects\n\nAssign the number 17 to the object `ub`.\n\n```{webr yourturn1a}\n#| exercise: ex_1\nub __ __\n\nub\n```\n\n::: {.solution exercise=\"ex_1\"}\n\n#### Solution\n\n`<-` is the assigner code\n\n\n```{webr yourturn1b}\n#| exercise: ex_1\n#| solution: true\nub <- 17\n\nub\n```\n\n:::\n\n```{webr yourturn1c}\n#| exercise: ex_1\n#| check: true\ngradethis::grade_this_code()\n```\n\n\n### Vectors\n\nCreate an array of numbers: 301, 978, and 101.\n\nAssign it to the object `years`.\n\n\n```{webr ar1a}\n#| exercise: ex_2\nyears #replace this with your code \n\nyears\n```\n\n```{webr ar1b}\n#| exercise: ex_2\n#| solution: true\nyears <- c(301, 978, 101)\n\nyears\n```\n\n```{webr ar1c}\n#| exercise: ex_2\n#| check: true\ngradethis::grade_this_code()\n```\n\n\n\n### Functions\n\nWhat’s the average of the array of numbers assigned to `years`”`?\n\n\n```{webr fu1}\n#| exercise: fu1\n    (years)\n\n# what function() gives you the average? or another word for average?\n```\n\n```{webr fu1-solution}\n#| exercise: fu1\n#| solution: true\nmean(years)\n```\n\n```{webr fu1-check}\n#| exercise: fu1\n#| check: true\ngradethis::grade_this_code()\n```\n\n## Classes\n\nTake a look at the structure of the object `burgers`:\n\n```{webr burgers, exercise=TRUE}\n#| exercise: burgers\n   (burgers)\n#do you remember what the name of the function is to look at the structure of an object in R?\n```\n\n```{webr burgers-solution}\n#| exercise: burgers\n#| solution: TRUE\nstr(burgers)\n```\n\n```{webr burgers-check}\n#| exercise: burgers\n#| check: true\ngradethis::grade_this_code()\n```\n\n**What kind of class is the variable id?**\n\n```{ojs}\n//| echo: false\nmutable ok_reponse = (reponse, n) => { return html`Loading...` };\nviewof reponse = Inputs.radio(\n  new Map([\n    [\"character\", 1],\n    [\"number\", 2],\n    [\"factor\", 3],\n    [\"date\", 4]\n  ])\n);\nok_reponse(reponse, 3);\n```\n\n\n## Matrices\n\n**Matrices** are two-dimensional vectors.\n\nIt looks like this.\n\n```{webr matrix}\nmat <- matrix(data=c(9,2,3,4,5,6), ncol=3)\nmat\n```\n\nThe argument `data` specifies which numbers should be in the matrix.\n\nUse either `ncol` to specify the number of columns or `nrow` to specify the number of rows.\n\nMatrix operations are similar to vector operations.\n\nTake a look at the output. Do you notice the numbers and commas in brackets that look like [1,] or [,2]?\n\nIf you've ever played [Battleship](https://www.incpartservices.com/wp-content/uploads/2019/06/battleship.jpeg) then those numbers represent coordinates in the grid. It's always **[R(ow),C(column)]**. I remember it as \"Let's get ready to **[Ro,Ck]**\n\nFor example: \n\n```{webr matrix2}\nmat[1,2]\n```\n\nThis is a Base R method to pull the value from the first row and second column in the grid, which is **3**.\n\nElements of a matrix can be addressed in the usual way.\n\n```{webr matrix3}\nmat[2,1]\n```\n\nWhen you want to select a whole row, you leave the spot for the column number empty and vice versa for the columns.\n\n```{webr matrix4}\nmat[,3]\n```\n\n## Data frames\n\nIf you're used to working with spreadsheets, then *data frames* will make the most sense to you in R.\n\nThis is how to create a data frame from vectors. You don't have to fully understand this at this point-- the data you'll be working with will come pre-structured if you're importing spreadsheets.\n\n\n```{webr df1}\npatientID <- c(111, 208, 113, 408)\nage <- c(25, 34, 28, 52)\nsex <- c(1,2,1,1)\ndiabetes <- c(\"Type1\", \"Type2\", \"Type1\", \"Type1\")\nstatus <- c(1,2,3,1)\n\npatientdata <- data.frame(patientID, age, sex, diabetes, status)\npatientdata\n```\n\nBut this is what's happening. A set of vectors are being created and a function called `data.frame()` joins them together into a data frame structure.\n\nWhat if we only want to columns: `patientID` and `age`?\n\n**How to pull elements from a data frame:**\n\nThere are several ways, but one way is to know what number columns they are in the dataframe (kind of like the Battleship method). We know `patientID` and `age` are columns 1 and 2. \n\nThis is how to narrow down to those columns only:\n\n```{webr}\n# a : means \"through\"\npatientdata[1:2]\n\n# So 1:2 means 1 through 2\n```\n\nAnother way is if you know the column names.\n\nThe Base R way involves using `c()` and brackets.\n\n```{webr}\npatientdata[c(\"diabetes\", \"status\")]\n```\n\n## Dollar signs\n\nIf you want to look at a specific vector in a dataframe, then you can get to it by first typing out the dataframe object name and column name separated by a `$` sign.\n\n```{webr}\npatientdata$age\n```\n\n**Doing math on vectors in a dataframe:**\n\nInstead of using `mean(patientdata[,2])`, you can select the column `age` from the `patientdata` data frame with the `$` sign.\n\n```{webr}\nmean(patientdata$age)\n```\n\n## Lists\n\nAnother basic structure in R is a *list*. \n\nThe main advantage of lists is that the \"columns\" they're not really ordered in columns any more, but are more of a collection of vectors) don't have to be of the same length, unlike matrices and data frames.\n\nKind of like JSON files are structured.\n\n```{webr}\ng <- \"My First List\"\nh <- c(25, 26, 18, 39)\n# The line below is creating a matrix that's 5 rows deep of numbers 1 through(\":\") 10\nj <- matrix(1:10, nrow = 5) \nk <- c(\"one\", \"two\", \"three\")\nmylist <- list(title = g, ages = h, j, k)   \n```\n\nThis is how a list would appear in the work space\n\n```{webr}\nnames(mylist)\n```\n\nHow to find out what's in the list\n\n```{webr}\nmylist[[2]] \n\nmylist[[\"ages\"]][[1]]\n```\n\nThe code above extracts data from the list\n\n```{webr}\nmylist$age + 10\n```\n\nHow to refer to and use the numbers in the example list\n\n## Functions applied to dataframes\n\nLet's start with the `sample_df` dataframe again below.\n\n```{webr}\n# Run the lines of code below\nsample_df <- data.frame(id=c(1001,1002,1003,1004), name=c(\"Steve\", \"Pam\", \"Jim\", \"Dwight\"), age=c(26, 65, 15, 7), race=c(\"White\", \"Black\", \"White\", \"Hispanic\"))\nsample_df$name <- as.character(sample_df$name)\nsample_df\n```\n\n**The following functions may not seem like they have much use now but we're going to need to understand them by week 3 when we do more advanced R programming.**\n\n`length(x)` - Find out how many things there are in an object or array\n\n```{webr}\nlength(sample_df$name)\n```\n\n`nchar(x)` - If **x** is a string, finds how how many characters there are \n\n```{webr}\nsample_df$name[1]\nnchar(sample_df$name[1])\n```\n\n`dim(x)` - Gives the dimensions of **x**\n```{webr}\ndim(sample_df)\n```\n\n`ncol(x)` - Counts the number of columns\n\n```{webr ncol}\nncol(sample_df)\n```\n\n`nrow(x)` - Returns the number of rows of **x**\n\n```{webr nrow}\nnrow(sample_df)\n```\n\n`str(x)` - Returns the structure of **x**\n\n```{webr str}\nstr(sample_df)\n```\n\n`summary(x)` - Summarizes the object as understood by R\n\n```{webr}\nsummary(sample_df)\n```\n\n\n`View(x)` - A command to open the object to browse in RStudio\n\nThis won't work through this browser exercise, but it's nice to have for later when you're working in RStudio.\n\n```{r view, eval=F}\nView(sample_df)\n```\n\n`rm(x)` - Removes **x**\n\n```{webr}\nrm(sample_df)\nsample_df\n```\n\n## Your turn again\n\n### Pulling a column of data\n\nConsider this data frame **burgers**\n\n```{webr burger_show}\nburgers\n```\n\nHow do you refer to the the *shirt* variable/column with the bracket method **[]**?\n\n\n```{webr v1}\n#| exercise: v1\n# Add to the line below \nburgers\n```\n\n```{webr v1-solution}\n#| exercise: v1\n#| solution: true\nburgers[,4]\n```\n\n```{webr v1-check}\n#| exercise: v1\n#| check: true\ngradethis::grade_this_code()\n```\n\nHow do you refer to the the *shirt* variable/column with $?\n\n```{webr v2}\n#| exercise: v2\n\n# Add to the line below \nburgers\n```\n\n```{webr v2-solution}\n#| exercise: v2\n#| solution: true\nburgers$shirt\n\n```\n\n```{webr v2-check}\n#| exercise: v2\n#| check: true\ngradethis::grade_this_code()\n``` \n\n\n\n### Pulling a row of data\n\nExtract entire row for Linda using [].\n\n```{webr v4}\n#| exercise: v4\n\n# Add to the line below \nburgers\n```\n\n\n```{webr v4-solution}\n#| exercise: v4\n#| solution: true\nburgers[2,]\n```   \n\n```{webr v4-check}\n#| exercise: v4\n#| check: true\ngradethis::grade_this_code()\n```   \n\n\n### Converting data classes\n\nConvert the *id* variable of the **burgers** data frame to numeric.\n\n\n```{webr v3}\n#| exercise: v3\n# Add to the line below \nburgers$id <- \nburgers$id\nclass(burgers$id)\n```\n\n\n```{webr v3-solution}\n#| exercise: v3\n#| solution: true\nburgers$id <- as.numeric(as.character(burgers$id))\nburgers$id\nclass(burgers$id)\n```   \n\n\n```{webr v3-check}\n#| exercise: v3\n#| check: true\ncheck_this_code()\n```   \n\n\n*Note:* Is the answer the same as above (correct) or is it 1-5 (false)? \n\n"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/Users/andrewtran/Projects/chjr/_extensions/r-wasm/live/live.lua"],"output-file":"syntax_r_basics.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","ojs-engine":true,"revealjs-plugins":[],"theme":{"light":"cosmo","dark":"darkly"},"title":"Syntax and R Basics","webr":{"packages":["dplyr","lubridate","stringr","readr","gradethis"]},"resources":["images"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}