{"title":"Importing, exporting data","markdown":{"yaml":{"title":"Importing, exporting data","engine":"knitr","format":"live-html","webr":{"packages":["dplyr","readxl","readr"]},"resources":["images","data"]},"headingText":"CSV files","containsRefs":false,"markdown":"\n\n{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}\n{{< include ../_extensions/r-wasm/live/_gradethis.qmd >}}\n\n\n\nComma separated files are the most common way to save spreadsheets that doesn't require a paid program from Microsoft to open.\n\n### What a csv file looks like\n\nCSV file names end with a **.csv**\n\n![](images/csv1.png?classes=shadow){width=100%}\n\n\n### What a csv file looks like on the inside**\n\nThis explains the values separated with commas part of the file name.\n\n![](images/csv2.png?classes=shadow){width=100%}\n\n## Importing CSV files\n\n- Importing CSV is part of base R, no package needed\n- But we're going to use a package anyway, **readr**\n\n**Two ways to get data**\n\n* If you have the URL address\n    * If the csv file exists on the internet, you don’t have to download it to your local machine and then import it, you can import it to R directly from the web using the link\n* If you have the file on your computer\n\n### Get the URL\n\nIf you have the link to a CSV file, right click [the link](https://data.ct.gov/Health-and-Human-Services/Admissions-to-DMHAS-Addiction-Treatment-by-Town-Ye/iyru-82zq/data) of the data and click **Copy Link Address**. This data set can be found on the [Connecticut Open Data Portal](https://data.ct.gov/Health-and-Human-Services/Admissions-to-DMHAS-Addiction-Treatment-by-Town-Ye/iyru-82zq/). **NOTE:** This data is no longer available. Download it instead from [here](https://www.andrewbatran.com/data/Admissions_to_DMHAS_Addiction_Treatment_by_Town__Year__and_Month.csv).\n\n![](images/rightclick.png?classes=shadow){width=100%}\n\n### read.csv()\n\nThe Base R function to import a CSV file is `read.csv()`. Just put the URL address in quotation marks and add the `stringsAsFactors=F` (In this code we're using the function `head()`-- this returns 6 rows by default, but we want to look at 10, so we’ll specify that when we call the function head(data, 10))\n\nClick `RUN CODE` to import the data from a  website and look at the first 10 rows.\n\n```{webr}\n#df_csv <- read.csv(\"https://data.ct.gov/api/views/rybz-nyjw/rows.csv?accessType=DOWNLOAD&api_foundry=true\", stringsAsFactors=F)\n\ndf <- read.csv(\"https://www.andrewbatran.com/data/Admissions_to_DMHAS_Addiction_Treatment_by_Town__Year__and_Month.csv\", stringsAsFactors=F)\n\n\nhead(df_csv, 10)\n```\n\n\n### Other way: Download it first\n\nWhen you right click on the link, instead of clicking **Copy Link Address**-- this time, click **Save Link As...**\n\n![](images/downloading.png?classes=shadow){width=100%}\n\nSave to your working directory.\n\nAfter saving to the directory, click on the circle arrow on the right to refresh the files to make sure it's there.\n\n![](images/directory.png?classes=shadow){width=100%}\n\n### Recall: How to change directories in RStudio\n\nEither by typing `setwd(\"/directory/where/you/want\")` or by clicking in the menu up top **Session > Set Working Directory > Choose Directory...**\n\n![](images/setwd.png?classes=shadow){width=100%}\n\n### Importing local csv data\n\nJust like before, except instead of the URL, it's the name of the file.\n\n**Note:** This will only work if the working directory is set to where the csv file is.\n\n### Using read_csv() from the readr package\n\n**readr** is a package that read rectangular data quickly and assumes characters are strings and not factors by default.\n\n```{webr segment4}\n## If you don't have readr installed yet, uncomment and run the line below\n#install.packages(\"readr\")\nlibrary(readr)\ndf_csv <- read_csv(\"https://www.andrewbatran.com/data/Admissions_to_DMHAS_Addiction_Treatment_by_Town__Year__and_Month.csv\")\n\n```\n\nAs you can see, the `read_csv()` function interpreted the **MonthYear** and **Town** columns as characters and not as Factors as `read.csv()` did.\n\n## Exporting CSV files\n\nWhen you're done analyzing or transforming your data, you can save your dataframe as a CSV file with `write_csv()` from the **readr** package.\n\n```{r export1, eval=F}\n# Pass the write_csv() function the name of the dataframe and what you want to call the file\nwrite_csv(df_csv, \"transformed_data.csv\")\n```\n\nThe file will save to your working directory, but you can specify sub directories with the function.\n\n```{r export2, eval=F}\n# Pass the write_csv() function the name of the dataframe and what you want to call the file\nwrite_csv(df_csv, \"data/transformed_data.csv\")\n```\n\n### Exporting data frames with `NA` \n\nWeird quirk alert: Exported files will include `NA`s so to replace them, pass the variable `na=\"whatever\"`. \n\n```{r export3, eval=F}\n# This replaces the NAs with blanks\nwrite_csv(df_csv, \"data/transformed_data.csv\", na=\"\")\n```\n\n\n## Your turn\n\n**When exporting a csv, how do you get rid of NAs with the readr package?**\n\n```{ojs}\n//| echo: false\nmutable ok_reponse1 = (reponse, n) => { return html`Loading...` };\nviewof reponse1 = Inputs.radio(\n  new Map([\n    ['write.csv(df_csv, \"data/transformed_data.csv\", is.na=F)', 1],\n    ['write_csv(df_csv, \"data/transformed_data.csv\", N.A=\"\")', 2],\n    ['write.csv(df_csv, \"data/transformed_data.csv\", na=\"\")', 3],\n    ['write_csv(df_csv, \"data/transformed_data.csv\", na=\"\")', 4]\n  ])\n);\nok_reponse1(reponse1, 4);\n```\n\n\n## Importing an Excel file\n\nExcel spreadsheets are unique in that they can contain multiple spreadsheets as a workbook.\n\n### What an Excel file looks like\n\nExcel file names end with a **.xls** or **.xlsx**\n\n![](images/excel1.png?classes=shadow){width=100%}\n\n### What an Excel file looks like on the inside\n\nWeird, right? Definitely difficult to parse.\n\n![](images/excel2.png?classes=shadow){width=100%}\n\nWhat I do sometimes (often) is save a sheet from Excel as a .csv file.\n\nThat's a short cut. But if you want to be transparent and really deal with the raw data then:\n\n## Importing Excel files\n- Importing Excel is complicated, **readxl package** is needed\n- There are more other packages that handle Excel files and can build extra sheets, but we won't be needing them for this instance\n\nFirst, install the `readxl` package if you have not yet done so. \n\nThat will have `readxl` as part of the group of packages.\n\n```{webr segment3a}\n## If you don't have readxl installed, uncomment the line below and run it \n#install.packages(\"readxl\")\nlibrary(readxl)\n```\n\nUnlike a csv, you can't just copy and paste the URL for an Excel sheet. \n\nYou gotta download the file first.\n\nVisit this link of [Excel data link](https://www.dropbox.com/scl/fi/sf7rjfsstsm1520z0xhum/StatisticsSummary.xls?dl=0&rlkey=j8frar23albdjx1b006onm48s) on Dropbox and click **Download**\n\n\n\n### read_excel()\n\nExcel spreadsheets have multiple sheets and it's best to explore what it looks like in Excel first because `read_excel()` requires specific sheets to be referred to when importing.\n\nGive it a shot with the first sheet.\n\n```\ndf_xl <- read_excel(\"data/StatisticsSummary.xls\", sheet=1)\n```\n\nCheck it\n\n```\nView(df_xl)\n```\n\n![](images/excel_imported.png?classes=shadow){width=100%}\n\n\n**This isn't right**. \n\n## Dealing with ugly data\n\nThe problem with Excel files is that people love to format it in ways that make it look nice in Excel but makes no sense in R.\n\n### read_excel() again\n\n\nBut this time we'll add `skip=2` so it skips the first rows when bringing in the data.\n\n```{webr skip}\ndf_xl <- read_excel(\"data/StatisticsSummary.xls\", sheet=1, skip=2)\n```\n\nMuch better\n\n```\nView(df_xl)\n```\n\n![](images/excel_imported2.png?classes=shadow){width=100%}\n\n*Notice that the column names are preserved with spaces and symbols.*\n\n\n\n```{webr df_xl}\n# the colnames() function lists the column names of the dataframe\ncolnames(df_xl)\n```\n\nSo how would one refer to the data in the columns with spaces\n\nIf we did it like normal with the `$` to pull the column we'd try\n\n```{webr df_xl_col_fail}\nhead(df_xl$Other Cases)\n```\n\nSee, spaces won't work. This is how to deal with columns with spaces-- add the back tick next to the 1 button on your keyboard.\n\n```{webr df_xl_col_pass}\nhead(df_xl$`Other Cases`)\n```\n\nIt's some extra finger work that you might be okay with if it was in a limited basis.\n\nHowever, in anticipation of the work we're going to be doing, we should go ahead and simplify the column names so there are no characters or spaces. We're going to load a new package called **[janitor](http://sfirke.github.io/janitor/)**. Its job is to exclusively clean names.\n\n```{webr janitor, warning=F, message=F}\n#install.packages(\"janitor\")\n\nlibrary(janitor)\n\ndf_xl <- clean_names(df_xl)\n\ncolnames(df_xl)\n```\n\nCompare the column names from this to the ones above. There are no capitalization and the spaces are replaced with `_` and this will be much easier to work with in R.\n\n## Exporting to Excel\n\nIt's preferable to save data frames as CSVs because it's more open and doesn't require a paid program for others to open.\n\nBut sometimes it's more economical to push out a bunch of sheets into one workbook (that's the perk of Excel, after all).\n\nWe won't get into that now but if you're curious, you can explore that in the the links below.\n\n* [Using the xlsx package](http://www.sthda.com/english/wiki/writing-data-from-r-to-excel-files-xls-xlsx)\n* [Reading and importing Excel files into R](https://www.datacamp.com/community/tutorials/r-tutorial-read-excel-into-r)\n\n\n## Your turn again\n\n**If you import an Excel file and it has 5 buffer rows at the top before the real data starts, how do you deal with that using the *readxl* package?**\n\n```{ojs}\n//| echo: false\nmutable ok_reponse2 = (reponse, n) => { return html`Loading...` };\nviewof reponse2 = Inputs.radio(\n  new Map([\n    ['read_excel(\"stats.xls\", sheet=1, row=5)', 1],\n    ['read_excel(\"stats.xls\", sheet=1, skip=5)', 2],\n    ['read_excel(\"stats.xls\", sheet=1, row=6)', 3],\n    ['read_excel(\"stats.xls\", sheet=1, row=4)', 4]\n  ])\n);\nok_reponse2(reponse2, 2);\n```\n\n**If you import an Excel file and it has 5 buffer rows at the top before the real data starts, how do you deal with that using the *readxl* package?**\n\n```{ojs}\n//| echo: false\nmutable ok_reponse3 = (reponse, n) => { return html`Loading...` };\nviewof reponse3 = Inputs.radio(\n  new Map([\n    ['read_excel(\"stats.xls\", sheet=1, row=5)', 1],\n    ['read_excel(\"stats.xls\", sheet=1, skip=5)', 2],\n    ['read_excel(\"stats.xls\", sheet=1, row=6)', 3],\n    ['read_excel(\"stats.xls\", sheet=1, row=4)', 4]\n  ])\n);\nok_reponse3(reponse3, 2);\n```\n\n**What is the function from the janitor package that eliminates spaces and lowercases the text in the column names?**\n\n\n```{ojs}\n//| echo: false\nmutable ok_reponse4 = (reponse, n) => { return html`Loading...` };\nviewof reponse4 = Inputs.radio(\n  new Map([\n    ['janitor()', 1],\n    ['fix_columns()', 2],\n    ['make.names()', 3],\n    ['clean_names()', 4]\n  ])\n);\nok_reponse4(reponse4, 4);\n```\n\n## Done!\n\nGreat job. \n\n","srcMarkdownNoYaml":"\n\n{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}\n{{< include ../_extensions/r-wasm/live/_gradethis.qmd >}}\n\n\n## CSV files\n\nComma separated files are the most common way to save spreadsheets that doesn't require a paid program from Microsoft to open.\n\n### What a csv file looks like\n\nCSV file names end with a **.csv**\n\n![](images/csv1.png?classes=shadow){width=100%}\n\n\n### What a csv file looks like on the inside**\n\nThis explains the values separated with commas part of the file name.\n\n![](images/csv2.png?classes=shadow){width=100%}\n\n## Importing CSV files\n\n- Importing CSV is part of base R, no package needed\n- But we're going to use a package anyway, **readr**\n\n**Two ways to get data**\n\n* If you have the URL address\n    * If the csv file exists on the internet, you don’t have to download it to your local machine and then import it, you can import it to R directly from the web using the link\n* If you have the file on your computer\n\n### Get the URL\n\nIf you have the link to a CSV file, right click [the link](https://data.ct.gov/Health-and-Human-Services/Admissions-to-DMHAS-Addiction-Treatment-by-Town-Ye/iyru-82zq/data) of the data and click **Copy Link Address**. This data set can be found on the [Connecticut Open Data Portal](https://data.ct.gov/Health-and-Human-Services/Admissions-to-DMHAS-Addiction-Treatment-by-Town-Ye/iyru-82zq/). **NOTE:** This data is no longer available. Download it instead from [here](https://www.andrewbatran.com/data/Admissions_to_DMHAS_Addiction_Treatment_by_Town__Year__and_Month.csv).\n\n![](images/rightclick.png?classes=shadow){width=100%}\n\n### read.csv()\n\nThe Base R function to import a CSV file is `read.csv()`. Just put the URL address in quotation marks and add the `stringsAsFactors=F` (In this code we're using the function `head()`-- this returns 6 rows by default, but we want to look at 10, so we’ll specify that when we call the function head(data, 10))\n\nClick `RUN CODE` to import the data from a  website and look at the first 10 rows.\n\n```{webr}\n#df_csv <- read.csv(\"https://data.ct.gov/api/views/rybz-nyjw/rows.csv?accessType=DOWNLOAD&api_foundry=true\", stringsAsFactors=F)\n\ndf <- read.csv(\"https://www.andrewbatran.com/data/Admissions_to_DMHAS_Addiction_Treatment_by_Town__Year__and_Month.csv\", stringsAsFactors=F)\n\n\nhead(df_csv, 10)\n```\n\n\n### Other way: Download it first\n\nWhen you right click on the link, instead of clicking **Copy Link Address**-- this time, click **Save Link As...**\n\n![](images/downloading.png?classes=shadow){width=100%}\n\nSave to your working directory.\n\nAfter saving to the directory, click on the circle arrow on the right to refresh the files to make sure it's there.\n\n![](images/directory.png?classes=shadow){width=100%}\n\n### Recall: How to change directories in RStudio\n\nEither by typing `setwd(\"/directory/where/you/want\")` or by clicking in the menu up top **Session > Set Working Directory > Choose Directory...**\n\n![](images/setwd.png?classes=shadow){width=100%}\n\n### Importing local csv data\n\nJust like before, except instead of the URL, it's the name of the file.\n\n**Note:** This will only work if the working directory is set to where the csv file is.\n\n### Using read_csv() from the readr package\n\n**readr** is a package that read rectangular data quickly and assumes characters are strings and not factors by default.\n\n```{webr segment4}\n## If you don't have readr installed yet, uncomment and run the line below\n#install.packages(\"readr\")\nlibrary(readr)\ndf_csv <- read_csv(\"https://www.andrewbatran.com/data/Admissions_to_DMHAS_Addiction_Treatment_by_Town__Year__and_Month.csv\")\n\n```\n\nAs you can see, the `read_csv()` function interpreted the **MonthYear** and **Town** columns as characters and not as Factors as `read.csv()` did.\n\n## Exporting CSV files\n\nWhen you're done analyzing or transforming your data, you can save your dataframe as a CSV file with `write_csv()` from the **readr** package.\n\n```{r export1, eval=F}\n# Pass the write_csv() function the name of the dataframe and what you want to call the file\nwrite_csv(df_csv, \"transformed_data.csv\")\n```\n\nThe file will save to your working directory, but you can specify sub directories with the function.\n\n```{r export2, eval=F}\n# Pass the write_csv() function the name of the dataframe and what you want to call the file\nwrite_csv(df_csv, \"data/transformed_data.csv\")\n```\n\n### Exporting data frames with `NA` \n\nWeird quirk alert: Exported files will include `NA`s so to replace them, pass the variable `na=\"whatever\"`. \n\n```{r export3, eval=F}\n# This replaces the NAs with blanks\nwrite_csv(df_csv, \"data/transformed_data.csv\", na=\"\")\n```\n\n\n## Your turn\n\n**When exporting a csv, how do you get rid of NAs with the readr package?**\n\n```{ojs}\n//| echo: false\nmutable ok_reponse1 = (reponse, n) => { return html`Loading...` };\nviewof reponse1 = Inputs.radio(\n  new Map([\n    ['write.csv(df_csv, \"data/transformed_data.csv\", is.na=F)', 1],\n    ['write_csv(df_csv, \"data/transformed_data.csv\", N.A=\"\")', 2],\n    ['write.csv(df_csv, \"data/transformed_data.csv\", na=\"\")', 3],\n    ['write_csv(df_csv, \"data/transformed_data.csv\", na=\"\")', 4]\n  ])\n);\nok_reponse1(reponse1, 4);\n```\n\n\n## Importing an Excel file\n\nExcel spreadsheets are unique in that they can contain multiple spreadsheets as a workbook.\n\n### What an Excel file looks like\n\nExcel file names end with a **.xls** or **.xlsx**\n\n![](images/excel1.png?classes=shadow){width=100%}\n\n### What an Excel file looks like on the inside\n\nWeird, right? Definitely difficult to parse.\n\n![](images/excel2.png?classes=shadow){width=100%}\n\nWhat I do sometimes (often) is save a sheet from Excel as a .csv file.\n\nThat's a short cut. But if you want to be transparent and really deal with the raw data then:\n\n## Importing Excel files\n- Importing Excel is complicated, **readxl package** is needed\n- There are more other packages that handle Excel files and can build extra sheets, but we won't be needing them for this instance\n\nFirst, install the `readxl` package if you have not yet done so. \n\nThat will have `readxl` as part of the group of packages.\n\n```{webr segment3a}\n## If you don't have readxl installed, uncomment the line below and run it \n#install.packages(\"readxl\")\nlibrary(readxl)\n```\n\nUnlike a csv, you can't just copy and paste the URL for an Excel sheet. \n\nYou gotta download the file first.\n\nVisit this link of [Excel data link](https://www.dropbox.com/scl/fi/sf7rjfsstsm1520z0xhum/StatisticsSummary.xls?dl=0&rlkey=j8frar23albdjx1b006onm48s) on Dropbox and click **Download**\n\n\n\n### read_excel()\n\nExcel spreadsheets have multiple sheets and it's best to explore what it looks like in Excel first because `read_excel()` requires specific sheets to be referred to when importing.\n\nGive it a shot with the first sheet.\n\n```\ndf_xl <- read_excel(\"data/StatisticsSummary.xls\", sheet=1)\n```\n\nCheck it\n\n```\nView(df_xl)\n```\n\n![](images/excel_imported.png?classes=shadow){width=100%}\n\n\n**This isn't right**. \n\n## Dealing with ugly data\n\nThe problem with Excel files is that people love to format it in ways that make it look nice in Excel but makes no sense in R.\n\n### read_excel() again\n\n\nBut this time we'll add `skip=2` so it skips the first rows when bringing in the data.\n\n```{webr skip}\ndf_xl <- read_excel(\"data/StatisticsSummary.xls\", sheet=1, skip=2)\n```\n\nMuch better\n\n```\nView(df_xl)\n```\n\n![](images/excel_imported2.png?classes=shadow){width=100%}\n\n*Notice that the column names are preserved with spaces and symbols.*\n\n\n\n```{webr df_xl}\n# the colnames() function lists the column names of the dataframe\ncolnames(df_xl)\n```\n\nSo how would one refer to the data in the columns with spaces\n\nIf we did it like normal with the `$` to pull the column we'd try\n\n```{webr df_xl_col_fail}\nhead(df_xl$Other Cases)\n```\n\nSee, spaces won't work. This is how to deal with columns with spaces-- add the back tick next to the 1 button on your keyboard.\n\n```{webr df_xl_col_pass}\nhead(df_xl$`Other Cases`)\n```\n\nIt's some extra finger work that you might be okay with if it was in a limited basis.\n\nHowever, in anticipation of the work we're going to be doing, we should go ahead and simplify the column names so there are no characters or spaces. We're going to load a new package called **[janitor](http://sfirke.github.io/janitor/)**. Its job is to exclusively clean names.\n\n```{webr janitor, warning=F, message=F}\n#install.packages(\"janitor\")\n\nlibrary(janitor)\n\ndf_xl <- clean_names(df_xl)\n\ncolnames(df_xl)\n```\n\nCompare the column names from this to the ones above. There are no capitalization and the spaces are replaced with `_` and this will be much easier to work with in R.\n\n## Exporting to Excel\n\nIt's preferable to save data frames as CSVs because it's more open and doesn't require a paid program for others to open.\n\nBut sometimes it's more economical to push out a bunch of sheets into one workbook (that's the perk of Excel, after all).\n\nWe won't get into that now but if you're curious, you can explore that in the the links below.\n\n* [Using the xlsx package](http://www.sthda.com/english/wiki/writing-data-from-r-to-excel-files-xls-xlsx)\n* [Reading and importing Excel files into R](https://www.datacamp.com/community/tutorials/r-tutorial-read-excel-into-r)\n\n\n## Your turn again\n\n**If you import an Excel file and it has 5 buffer rows at the top before the real data starts, how do you deal with that using the *readxl* package?**\n\n```{ojs}\n//| echo: false\nmutable ok_reponse2 = (reponse, n) => { return html`Loading...` };\nviewof reponse2 = Inputs.radio(\n  new Map([\n    ['read_excel(\"stats.xls\", sheet=1, row=5)', 1],\n    ['read_excel(\"stats.xls\", sheet=1, skip=5)', 2],\n    ['read_excel(\"stats.xls\", sheet=1, row=6)', 3],\n    ['read_excel(\"stats.xls\", sheet=1, row=4)', 4]\n  ])\n);\nok_reponse2(reponse2, 2);\n```\n\n**If you import an Excel file and it has 5 buffer rows at the top before the real data starts, how do you deal with that using the *readxl* package?**\n\n```{ojs}\n//| echo: false\nmutable ok_reponse3 = (reponse, n) => { return html`Loading...` };\nviewof reponse3 = Inputs.radio(\n  new Map([\n    ['read_excel(\"stats.xls\", sheet=1, row=5)', 1],\n    ['read_excel(\"stats.xls\", sheet=1, skip=5)', 2],\n    ['read_excel(\"stats.xls\", sheet=1, row=6)', 3],\n    ['read_excel(\"stats.xls\", sheet=1, row=4)', 4]\n  ])\n);\nok_reponse3(reponse3, 2);\n```\n\n**What is the function from the janitor package that eliminates spaces and lowercases the text in the column names?**\n\n\n```{ojs}\n//| echo: false\nmutable ok_reponse4 = (reponse, n) => { return html`Loading...` };\nviewof reponse4 = Inputs.radio(\n  new Map([\n    ['janitor()', 1],\n    ['fix_columns()', 2],\n    ['make.names()', 3],\n    ['clean_names()', 4]\n  ])\n);\nok_reponse4(reponse4, 4);\n```\n\n## Done!\n\nGreat job. \n\n"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/Users/andrewtran/Projects/chjr/_extensions/r-wasm/live/live.lua"],"output-file":"importing_exporting.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","ojs-engine":true,"revealjs-plugins":[],"theme":{"light":"cosmo","dark":"darkly"},"title":"Importing, exporting data","webr":{"packages":["dplyr","readxl","readr"]},"resources":["images","data"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}