{"title":"Visualizing data","markdown":{"yaml":{"title":"Visualizing data","engine":"knitr","format":"live-html","webr":{"packages":["readr","dplyr","lubridate","tidyr","ggplot2","stringr","janitor","readxl","gradethis","DT","knitr"]},"resources":["images","data"]},"headingText":"Data Introduction","containsRefs":false,"markdown":"\n\n{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}\n{{< include ../_extensions/r-wasm/live/_gradethis.qmd >}}\n\n```{webr 2}\n#| include: false\n\n\n#designations <- readxl::read_excel(tf1)\ndf <- read_csv(\"https://www.fema.gov/api/open/v2/DisasterDeclarationsSummaries.csv\")\n#devtools::install_github(\"r-for-educators/flair\")\n\n#library(flair)\n#df <- read_csv(\"data/DisasterDeclarationsSummaries.csv\")\ndf_new <- df |> \n  mutate(GEOID=str_c(fipsStateCode, fipsCountyCode))\n\n\ncounty_pop <- read_csv(\"data/county_population.csv\")\n#county_pop <- read_csv(\"https://www.andrewbatran.com/data/county_population.csv\")\n\njoined_new <- left_join(df_new, county_pop, by=\"GEOID\") |> \n  mutate(year=year(incidentBeginDate))\n\nannual_disasters <- joined_new |> \n  count(incidentType, year, name=\"total\") \n  \nannual_fires <- annual_disasters  |> \n  filter(incidentType==\"Fire\")\n\n```\n\n```{webr 3}\n#| edit: false\n#| output: false\n#| define:\n#|   - ok_reponse\nlibrary(htmltools)\nok_reponse <- function(reponse, n) {\n  if (is.na(reponse)) HTML(\"\")\n  else if (reponse == n) div(HTML(\"Correct ✓\"), style = \"color: green\")\n  else div(HTML(\"Incorrect ✗\"), style = \"color: red\")\n}\n```\n\n\n\nBefore we begin, let's bring in the data we've been working with.\n\n```{r eval=F}\ndf <- read_csv(\"https://www.fema.gov/api/open/v2/DisasterDeclarationsSummaries.csv\")\n\ndf_new <- df |> \n  mutate(GEOID=str_c(fipsStateCode, fipsCountyCode))\n\ncounty_pop <- read_csv(\"data/county_population.csv\")\n\njoined_new <- left_join(df_new, county_pop, by=\"GEOID\") |> \n  mutate(year=year(incidentBeginDate))\n```\n\n\nLet's take a look at what were working with. Check out `joined_new` with the usual function we use:\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr glimpse}\n#| exercise: glimpse\n\n```\n\n## Hint\n\n::: { .hint exercise=\"glimpse\"}\nfunction starts with an *g*.\n:::\n\n## Solution\n\n::: { .solution exercise=\"glimpse\"}\n```{webr glimpse-solution}\n#| exercise: glimpse\n#| solution: true\nglimpse(joined_new)\n```\n\n\n```{webr glimpse-check}\n#| exercise: glimpse\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n::::\n\nOkay, let's transform the data like we did before. \n\nCan you count up how many **disasters** there have been **per year**? Not total disasters. Individual disasters.\n\nCall the new column \"total\".\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr annual_disasters}\n#| exercise: annual_disasters\nannual_disasters <- joined_new |> \n\n    \nannual_disasters\n```\n\n## Hint\n\n::: { .hint exercise=\"annual_disasters\"}\nYou only need to add one new line. \nThe function starts with a *c* and don't forget to name the column you're creating.\nyear should be the second argument in the function.\n:::\n\n## Solution\n\n::: { .solution exercise=\"annual_disasters\"}\n```{webr annual_disasters-solution}\n#| exercise: annual_disasters\n#| solution: true\nannual_disasters <- joined_new |> \n  count(incidentType, year, name=\"total\") \n  \nannual_disasters\n```\n\n```{webr annual_disasters-check}\n#| exercise: annual_disasters\n#| check: true\ngrade_this_code()\n```\n:::\n::::\n\nAlright, we've got a lot of data going back decades. \n\nThe benefit of working quickly with data in R is how you can quickly visualize it to spot any trends.\n\nLet's do that.\n\nBut before we do, let's create another data frame specifically for fires.\n\nFilter incidentType for \"Fire\", please.\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr fires}\n#| exercise: fires\nannual_fires <- annual_disasters  |> \n\nannual_fires\n```\n\n## Hint\n\n::: {.hint exercise=\"fires\"}\nThe function starts with a *f* and don't forget ==\n:::\n\n## Solution\n\n::: {.solution exercise=\"fires\"}\n```{webr fires-solution}\n#| exercise: fires\n#| solution: true\nannual_fires <- annual_disasters  |> \n  filter(incidentType==\"Fire\")\n\nannual_fires\n```\n\n```{webr fires-check}\n#| exercise: fires\n#| check: true\ngradethis::grade_this_code()\n```\n\n:::\n::::\n  \n\n## Grammar of Graphics\n\nThe grammar of graphics lets you approach visualizations structurally, letting you combine and swap out graphical elements into figures that display data meaningfully.\n\nIt takes two lines of code.\n\nThis is what the code and chart looks like.\n\nRun the code below.\n\n```{webr}\nggplot(data=annual_fires) +\n  geom_col(aes(x=year, y=total)) \n```\n\nBasically, every of a chart can created using these aesthetic components and mapping them:\n\n### Mapping data to aesthetics\n\n**Aesthetic**\n\n* The visual property of a graph\n\n* Position, shape, color, etc.\n\n**Data**\n\n* A column in a data set\n\n-----\n\nHere's are the core components of the chart above:\n\n<table>\n  <tr>\n    <th class=\"cell-left\">Data</th>\n    <th class=\"cell-left\">Aesthetic</th>\n    <th class=\"cell-left\">Graphic/Geometry</th>\n  </tr>\n  <tr>\n    <td class=\"cell-left\">Year</td>\n    <td class=\"cell-left\">Position (x-axis)&emsp;</td>\n    <td class=\"cell-left\">Column</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\">Total disasters</td>\n    <td class=\"cell-left\">Position (y-axis)</td>\n    <td class=\"cell-left\">Point</td>\n  </tr>\n</table>\n\n-----\n\nHere's how the data was mapped in ggplot2 code from the `annual_fires` data frame:\n\n<table>\n  <tr>\n    <th class=\"cell-left\">Data</th>\n    <th class=\"cell-left\">aes()</th>\n    <th class=\"cell-left\">geom</th>\n  </tr>\n  <tr>\n    <td class=\"cell-left\">year</td>\n    <td class=\"cell-left\">x</td>\n    <td class=\"cell-left\">geom_col()</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\">total</td>\n    <td class=\"cell-left\">y</td>\n    <td class=\"cell-left\">geom_col()</td>\n  </tr>\n</table>\n\n\n\n### ggplot() template\n\nHere's the dataframe called `annual_fires` as a reminder:\n\n```{webr preview}\nannual_fires |> slice(1:5)\n```\n\nOkay, now that you see where all the pieces come from, here's how **ggplot()** works.\n\nAt its core you need to tell it what data you're using, what type of visual geometry you want to use, and what variables you want represented from the data.\n\n**Important:** We have to use + signs between each line, not `|>`. This is because **ggplot()** was created before the **tidyverse** piping method was established.\n\n\n---\n\n![](images/aesmap.png)\n\n---\n\n![](images/ggplot1.png)\n\n### Grammatical layers\n\nWhen constructing charts, so far we know about data, aesthetics, and geometries.\n\nThink of these components as **layers**.\n\n![](images/ggplot1a.png){fig-align=\"center\" width=50%}\n\nAdd them to foundational `ggplot()` with +\n\nThese are all the arguments we can enhance the data viz with. \n\nChange the colors of the viz based on a column. Or the size of the shape.\n\nOr the opacity or the gradient.\n\n**Possible aesthetics**\n\n![](images/ggplot2a.png)\n\nWe can also swap out the different geometry types.\n\nIf you don't want a bar, you can use a line. Or a point.\n\nYou can even use shapefiles.\n\n**Possible geoms**\n\n![](images/ggplot3a.png){fig-align=\"center\" width=60%}\n\n\nTHERE ARE [SO MANY GEOMS](https://twitter.com/search?q=geom_%20%23rstats&src=typed_query&f=image) for different visualizations. Here are the [official ones](https://ggplot2.tidyverse.org/reference/index.html#section-layer-geoms).\n\n**Try the code from above again** but this time use **geom_point()** and then try it with **geom_line()**\n\n```{webr first_chart_geoms}\nggplot(data=annual_fires) +\n  geom______(aes(x=year, y=total)) \n```\n\nYou can really start to see the power of cycling quickly through different chart styles to see which one is most effective at telling the story you want to tell.\n\nSo after you have the very basic elements needed to create a chart, you can build and style it with more layers.\n\nBecause the defaults are rarely what you want and effective dataviz comes from small decisions you make along the way.\n\n### Additional layers\n\nThere are many of other grammatical layers we can use to describe graphs.\n\nWe sequentially add layers onto the foundational `ggplot()` plot to create complex figures.\n\n![](images/ggplot4a.png){fig-align=\"center\" width=50%}\n\n\nScales change the properties of the variable mapping.\n\nHere are a few examples:\n\n<table>\n  <tr>\n    <th class=\"cell-left\">Example layer</th>\n    <th class=\"cell-left\">What it does</th>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">scale_x_continuous()</code></td>\n    <td class=\"cell-left\">Make the x-axis continuous</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">scale_x_continuous(breaks = 1:5)&ensp;</code></td>\n    <td class=\"cell-left\">Manually specify axis ticks</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">scale_x_date()</code></td>\n    <td class=\"cell-left\">Considers x-axis dates</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">scale_color_gradient()</code></td>\n    <td class=\"cell-left\">Use a gradient</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">scale_fill_viridis_d()</code></td>\n    <td class=\"cell-left\">Fill with discrete viridis colors</td>\n  </tr>\n</table>\n\n----\n\nCheck out the x-axis.\n\n### Exercise 2\n\nNow add `scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022)` to the bottom of the code.\n\n```{webr scented2}\n#| exercise: scented2\nggplot(data=annual_fires) +\n  geom_col(aes(x=year, y=total)) +\n\n\n# Add line above this one\n```\n\n```{webr scented2-solution}\n#| exercise: scented2\n#| solution: true\nggplot(data=annual_fires) +\n  geom_col(aes(x=year, y=total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022)\n\n```\n\n```{r scented2-code-check}\n#| exercise: scented2\n#| check: true\ngradethis::grade_this_code()\n```\n\nDo you see the difference at the bottom of the chart compared to the one above it?\n\nIt limited the scope of the x-axis so it didn't go back to the '50s anymore.\n\nAnd it specifically labeled the years 2010 through 2022.\n\n## Facets\n\nThe next possible layer allows for small multiples. It's really neat.\n\nFacets show subplots for different subsets of data.\n\n<table>\n  <tr>\n    <th class=\"cell-left\">Example layer</th>\n    <th class=\"cell-left\">What it does</th>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">facet_wrap(vars(incidentType))</code></td>\n    <td class=\"cell-left\">Plot for each disaster type</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">facet_wrap(vars(incidentType, year))</code>&emsp;</td>\n    <td class=\"cell-left\">Plot for each disaster type/year</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">facet_wrap(..., ncol = 1)</code></td>\n    <td class=\"cell-left\">Put all facets in one column</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">facet_wrap(..., nrow = 1)</code></td>\n    <td class=\"cell-left\">Put all facets in one row</td>\n  </tr>\n</table>\n\nThe table above shows all the different ways you can use facets-- you can break it out by one extra variable or even two.\n\nWe'll use the annual disasters this time so we have more than just the fires.\n\nBut we'll filter it to hurricanes and fires and floods.\n\nAnd we can combine it with pipes before we use **ggplot()** it.\n\nAdd the `facet_wrap()` line on the variable **incidentType** (like the first example in the table above).\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr facet_example1}\n#| exercise: facet_example1\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  ______________________________\n```\n\n## Hint\n\n::: {.hint exercise=\"facet_example1\"}\nThe function starts with a *f* and don't forget ==\n:::\n\n## Solution\n\n::: {.solution exercise=\"facet_exmaple1\"}\n```{webr facet_example1-solution}\n#| exercise: facet_example1\n#| solution: true\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType))\n```\n\n\n```{webr facet_example1-check}\n#| exercise: facet_example1\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n::::\n\nAlright, looks like the x-axis labels are getting a little crowded.\n\nWe can't even read it!\n\n### Try again!\n\nNow, try it with `ncol=1` as an additional argument in `facet_wrap()`\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr facet_example2}\n#| exercise: facet_example2\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType)_______)\n```\n\n## Hint\n\n::: {.hint exercise=\"facet_example2\"}\nfunction starts with an *f*.\nAdditional arguments in a function are separated with a comma.\n:::\n\n## Solution\n\n::: {.solution exercise=\"facet_example2\"}\n```{webr facet_example2-solution}\n#| exercise: facet_example2\n#| solution: true\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType), ncol=1)\n```\n\n\n\n```{webr facet_example2-check}\n#| exercise: facet_example2\n#| solution: true\ngrade_this_code()\n```\n:::\n::::\n\n## Labels\n\nNow we can add more customization to the chart.\n\nTo make it really shine!\n\n<table>\n  <tr>\n    <th class=\"cell-left\">Example layer</th>\n    <th class=\"cell-left\">What it does</th>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">labs(title = \"Neat title\")</code></td>\n    <td class=\"cell-left\">Title</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">labs(caption = \"Something\")</td>\n    <td class=\"cell-left\">Caption</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">labs(y = \"Something\")</td>\n    <td class=\"cell-left\">y-axis</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">labs(color = \"Type\")</code></td>\n    <td class=\"cell-left\">Title of size legend</td>\n  </tr>\n</table>\n\n* Title should be \"Disaster declarations since 2010\"\n* Label for the x-axis should be blank (aka \"\") because the years are obvious\n* Label for the y-axis should be \"Total\"\n* Caption should be \"Data: FEMA\"\n\nAdd those labels below:\n\n::: {.panel-tabset}\n\n## Example\n\n```{webr labels_example}\n#| exercise: labels_example\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType), ncol=1) +\n  labs(\n    \n    \n    \n    \n  )\n```\n\n## Hint\n\n::: {.hint exercise=\"labels_example\"}\nYou only need to call labs() once.\nWithin parentheses, just separate the arguments with commas. You don't use the plus signs.\n:::\n\n## Solution\n\n::: {.solution exercise=\"labels_example\"}\n```{webr labels_example-solution}\n#| exercise: labels_example\n#| solution: true\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType), ncol=1) +\n  labs(\n    title = \"Disaster declarations since 2010\",\n    x = \"\",\n    y = \"Total\",\n    caption= \"Data: FEMA\"\n  )\n```\n\n\n```{webr labels_example-check}\n#| exercise: labels_example\n#| check: true\ngradethis::grade_this_code()\n```\n\n:::\n::::\n\n## Themes\n\nChange the appearance of anything in the plot.\n\nWhile you can customize every font, color, gradient, etc, you can set these styles up ahead of time or use the ones others have created.\n\nThere are many built-in themes.\n\n\n<table>\n  <tr>\n    <th class=\"cell-left\">Example layer</th>\n    <th class=\"cell-left\">What it does</th>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">theme_grey()</code></td>\n    <td class=\"cell-left\">Default grey background</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">theme_bw()</td>\n    <td class=\"cell-left\">Black and white</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">theme_dark()</td>\n    <td class=\"cell-left\">Dark</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">theme_minimal()</code></td>\n    <td class=\"cell-left\">Minimal</td>\n  </tr>\n</table>\n\nTry out the different themes listed above in the code below.\n\n\n```{webr themes-example}\n#| exercise: themes-example\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType), ncol=1) +\n  labs(\n    title = \"Disaster declarations since 2010\",\n    x = \"\",\n    y = \"Total\",\n    caption= \"Data: FEMA\"\n  ) +\n  theme______()\n```\n\n### More themes\n\nThere are a collections of pre-built themes online, like the [ggthemes package](https://jrnold.github.io/ggthemes/).\n\nOrganizations often make their own custom themes, like [the BBC](https://bbc.github.io/rcookbook/).\n\n\n![](images/bbc-cookbook.png)\n\n### Theme adjustments\n\nMake theme adjustments with `theme()`\n\nThere are a billion options here!\n\nAdd this chunk of code in the exercise below it:\n\n```{r eval=F}\ntheme_bw() + \ntheme(plot.title = element_text(face = \"bold\"),\n      panel.grid = element_blank(),\n      axis.title.y = element_text(face = \"italic\"))\n```\n\n### Exercise 5\n\n```{webr themes_example2}\n#| exercise: themes_example2\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType), ncol=1) +\n  labs(\n    title = \"Disaster declarations since 2010\",\n    x = \"\",\n    y = \"Total\",\n    caption= \"Data: FEMA\"\n  ) +\n\n# copy and paste the chunk of code above this chunk into the line above this one\n```\n\n\n```{webr themes_example2-solution}\n#| exercise: themes_example2\n#| solution: true\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType), ncol=1) +\n  labs(\n    title = \"Disaster declarations since 2010\",\n    x = \"\",\n    y = \"Total\",\n    caption= \"Data: FEMA\"\n  ) +\n  theme_bw() + \n  theme(plot.title = element_text(face = \"bold\"),\n        panel.grid = element_blank(),\n        axis.title.y = element_text(face = \"italic\"))\n```\n\n```{webr themes_example2-code-check}\n#| exercise: themes_example2\n#| check: true\ngradethis::grade_this_code()\n```\n\n\nThese were just a few examples of layers.\n\n![](images/ggplot5.png){fig-align=\"center\" width=50%}\n\n\nSee the [ggplot2 documentation](https://ggplot2.tidyverse.org/reference/index.html) for complete examples of everything you can do\n\n### Done!\n","srcMarkdownNoYaml":"\n\n{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}\n{{< include ../_extensions/r-wasm/live/_gradethis.qmd >}}\n\n```{webr 2}\n#| include: false\n\n\n#designations <- readxl::read_excel(tf1)\ndf <- read_csv(\"https://www.fema.gov/api/open/v2/DisasterDeclarationsSummaries.csv\")\n#devtools::install_github(\"r-for-educators/flair\")\n\n#library(flair)\n#df <- read_csv(\"data/DisasterDeclarationsSummaries.csv\")\ndf_new <- df |> \n  mutate(GEOID=str_c(fipsStateCode, fipsCountyCode))\n\n\ncounty_pop <- read_csv(\"data/county_population.csv\")\n#county_pop <- read_csv(\"https://www.andrewbatran.com/data/county_population.csv\")\n\njoined_new <- left_join(df_new, county_pop, by=\"GEOID\") |> \n  mutate(year=year(incidentBeginDate))\n\nannual_disasters <- joined_new |> \n  count(incidentType, year, name=\"total\") \n  \nannual_fires <- annual_disasters  |> \n  filter(incidentType==\"Fire\")\n\n```\n\n```{webr 3}\n#| edit: false\n#| output: false\n#| define:\n#|   - ok_reponse\nlibrary(htmltools)\nok_reponse <- function(reponse, n) {\n  if (is.na(reponse)) HTML(\"\")\n  else if (reponse == n) div(HTML(\"Correct ✓\"), style = \"color: green\")\n  else div(HTML(\"Incorrect ✗\"), style = \"color: red\")\n}\n```\n\n\n## Data Introduction\n\nBefore we begin, let's bring in the data we've been working with.\n\n```{r eval=F}\ndf <- read_csv(\"https://www.fema.gov/api/open/v2/DisasterDeclarationsSummaries.csv\")\n\ndf_new <- df |> \n  mutate(GEOID=str_c(fipsStateCode, fipsCountyCode))\n\ncounty_pop <- read_csv(\"data/county_population.csv\")\n\njoined_new <- left_join(df_new, county_pop, by=\"GEOID\") |> \n  mutate(year=year(incidentBeginDate))\n```\n\n\nLet's take a look at what were working with. Check out `joined_new` with the usual function we use:\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr glimpse}\n#| exercise: glimpse\n\n```\n\n## Hint\n\n::: { .hint exercise=\"glimpse\"}\nfunction starts with an *g*.\n:::\n\n## Solution\n\n::: { .solution exercise=\"glimpse\"}\n```{webr glimpse-solution}\n#| exercise: glimpse\n#| solution: true\nglimpse(joined_new)\n```\n\n\n```{webr glimpse-check}\n#| exercise: glimpse\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n::::\n\nOkay, let's transform the data like we did before. \n\nCan you count up how many **disasters** there have been **per year**? Not total disasters. Individual disasters.\n\nCall the new column \"total\".\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr annual_disasters}\n#| exercise: annual_disasters\nannual_disasters <- joined_new |> \n\n    \nannual_disasters\n```\n\n## Hint\n\n::: { .hint exercise=\"annual_disasters\"}\nYou only need to add one new line. \nThe function starts with a *c* and don't forget to name the column you're creating.\nyear should be the second argument in the function.\n:::\n\n## Solution\n\n::: { .solution exercise=\"annual_disasters\"}\n```{webr annual_disasters-solution}\n#| exercise: annual_disasters\n#| solution: true\nannual_disasters <- joined_new |> \n  count(incidentType, year, name=\"total\") \n  \nannual_disasters\n```\n\n```{webr annual_disasters-check}\n#| exercise: annual_disasters\n#| check: true\ngrade_this_code()\n```\n:::\n::::\n\nAlright, we've got a lot of data going back decades. \n\nThe benefit of working quickly with data in R is how you can quickly visualize it to spot any trends.\n\nLet's do that.\n\nBut before we do, let's create another data frame specifically for fires.\n\nFilter incidentType for \"Fire\", please.\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr fires}\n#| exercise: fires\nannual_fires <- annual_disasters  |> \n\nannual_fires\n```\n\n## Hint\n\n::: {.hint exercise=\"fires\"}\nThe function starts with a *f* and don't forget ==\n:::\n\n## Solution\n\n::: {.solution exercise=\"fires\"}\n```{webr fires-solution}\n#| exercise: fires\n#| solution: true\nannual_fires <- annual_disasters  |> \n  filter(incidentType==\"Fire\")\n\nannual_fires\n```\n\n```{webr fires-check}\n#| exercise: fires\n#| check: true\ngradethis::grade_this_code()\n```\n\n:::\n::::\n  \n\n## Grammar of Graphics\n\nThe grammar of graphics lets you approach visualizations structurally, letting you combine and swap out graphical elements into figures that display data meaningfully.\n\nIt takes two lines of code.\n\nThis is what the code and chart looks like.\n\nRun the code below.\n\n```{webr}\nggplot(data=annual_fires) +\n  geom_col(aes(x=year, y=total)) \n```\n\nBasically, every of a chart can created using these aesthetic components and mapping them:\n\n### Mapping data to aesthetics\n\n**Aesthetic**\n\n* The visual property of a graph\n\n* Position, shape, color, etc.\n\n**Data**\n\n* A column in a data set\n\n-----\n\nHere's are the core components of the chart above:\n\n<table>\n  <tr>\n    <th class=\"cell-left\">Data</th>\n    <th class=\"cell-left\">Aesthetic</th>\n    <th class=\"cell-left\">Graphic/Geometry</th>\n  </tr>\n  <tr>\n    <td class=\"cell-left\">Year</td>\n    <td class=\"cell-left\">Position (x-axis)&emsp;</td>\n    <td class=\"cell-left\">Column</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\">Total disasters</td>\n    <td class=\"cell-left\">Position (y-axis)</td>\n    <td class=\"cell-left\">Point</td>\n  </tr>\n</table>\n\n-----\n\nHere's how the data was mapped in ggplot2 code from the `annual_fires` data frame:\n\n<table>\n  <tr>\n    <th class=\"cell-left\">Data</th>\n    <th class=\"cell-left\">aes()</th>\n    <th class=\"cell-left\">geom</th>\n  </tr>\n  <tr>\n    <td class=\"cell-left\">year</td>\n    <td class=\"cell-left\">x</td>\n    <td class=\"cell-left\">geom_col()</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\">total</td>\n    <td class=\"cell-left\">y</td>\n    <td class=\"cell-left\">geom_col()</td>\n  </tr>\n</table>\n\n\n\n### ggplot() template\n\nHere's the dataframe called `annual_fires` as a reminder:\n\n```{webr preview}\nannual_fires |> slice(1:5)\n```\n\nOkay, now that you see where all the pieces come from, here's how **ggplot()** works.\n\nAt its core you need to tell it what data you're using, what type of visual geometry you want to use, and what variables you want represented from the data.\n\n**Important:** We have to use + signs between each line, not `|>`. This is because **ggplot()** was created before the **tidyverse** piping method was established.\n\n\n---\n\n![](images/aesmap.png)\n\n---\n\n![](images/ggplot1.png)\n\n### Grammatical layers\n\nWhen constructing charts, so far we know about data, aesthetics, and geometries.\n\nThink of these components as **layers**.\n\n![](images/ggplot1a.png){fig-align=\"center\" width=50%}\n\nAdd them to foundational `ggplot()` with +\n\nThese are all the arguments we can enhance the data viz with. \n\nChange the colors of the viz based on a column. Or the size of the shape.\n\nOr the opacity or the gradient.\n\n**Possible aesthetics**\n\n![](images/ggplot2a.png)\n\nWe can also swap out the different geometry types.\n\nIf you don't want a bar, you can use a line. Or a point.\n\nYou can even use shapefiles.\n\n**Possible geoms**\n\n![](images/ggplot3a.png){fig-align=\"center\" width=60%}\n\n\nTHERE ARE [SO MANY GEOMS](https://twitter.com/search?q=geom_%20%23rstats&src=typed_query&f=image) for different visualizations. Here are the [official ones](https://ggplot2.tidyverse.org/reference/index.html#section-layer-geoms).\n\n**Try the code from above again** but this time use **geom_point()** and then try it with **geom_line()**\n\n```{webr first_chart_geoms}\nggplot(data=annual_fires) +\n  geom______(aes(x=year, y=total)) \n```\n\nYou can really start to see the power of cycling quickly through different chart styles to see which one is most effective at telling the story you want to tell.\n\nSo after you have the very basic elements needed to create a chart, you can build and style it with more layers.\n\nBecause the defaults are rarely what you want and effective dataviz comes from small decisions you make along the way.\n\n### Additional layers\n\nThere are many of other grammatical layers we can use to describe graphs.\n\nWe sequentially add layers onto the foundational `ggplot()` plot to create complex figures.\n\n![](images/ggplot4a.png){fig-align=\"center\" width=50%}\n\n\nScales change the properties of the variable mapping.\n\nHere are a few examples:\n\n<table>\n  <tr>\n    <th class=\"cell-left\">Example layer</th>\n    <th class=\"cell-left\">What it does</th>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">scale_x_continuous()</code></td>\n    <td class=\"cell-left\">Make the x-axis continuous</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">scale_x_continuous(breaks = 1:5)&ensp;</code></td>\n    <td class=\"cell-left\">Manually specify axis ticks</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">scale_x_date()</code></td>\n    <td class=\"cell-left\">Considers x-axis dates</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">scale_color_gradient()</code></td>\n    <td class=\"cell-left\">Use a gradient</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">scale_fill_viridis_d()</code></td>\n    <td class=\"cell-left\">Fill with discrete viridis colors</td>\n  </tr>\n</table>\n\n----\n\nCheck out the x-axis.\n\n### Exercise 2\n\nNow add `scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022)` to the bottom of the code.\n\n```{webr scented2}\n#| exercise: scented2\nggplot(data=annual_fires) +\n  geom_col(aes(x=year, y=total)) +\n\n\n# Add line above this one\n```\n\n```{webr scented2-solution}\n#| exercise: scented2\n#| solution: true\nggplot(data=annual_fires) +\n  geom_col(aes(x=year, y=total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022)\n\n```\n\n```{r scented2-code-check}\n#| exercise: scented2\n#| check: true\ngradethis::grade_this_code()\n```\n\nDo you see the difference at the bottom of the chart compared to the one above it?\n\nIt limited the scope of the x-axis so it didn't go back to the '50s anymore.\n\nAnd it specifically labeled the years 2010 through 2022.\n\n## Facets\n\nThe next possible layer allows for small multiples. It's really neat.\n\nFacets show subplots for different subsets of data.\n\n<table>\n  <tr>\n    <th class=\"cell-left\">Example layer</th>\n    <th class=\"cell-left\">What it does</th>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">facet_wrap(vars(incidentType))</code></td>\n    <td class=\"cell-left\">Plot for each disaster type</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">facet_wrap(vars(incidentType, year))</code>&emsp;</td>\n    <td class=\"cell-left\">Plot for each disaster type/year</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">facet_wrap(..., ncol = 1)</code></td>\n    <td class=\"cell-left\">Put all facets in one column</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">facet_wrap(..., nrow = 1)</code></td>\n    <td class=\"cell-left\">Put all facets in one row</td>\n  </tr>\n</table>\n\nThe table above shows all the different ways you can use facets-- you can break it out by one extra variable or even two.\n\nWe'll use the annual disasters this time so we have more than just the fires.\n\nBut we'll filter it to hurricanes and fires and floods.\n\nAnd we can combine it with pipes before we use **ggplot()** it.\n\nAdd the `facet_wrap()` line on the variable **incidentType** (like the first example in the table above).\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr facet_example1}\n#| exercise: facet_example1\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  ______________________________\n```\n\n## Hint\n\n::: {.hint exercise=\"facet_example1\"}\nThe function starts with a *f* and don't forget ==\n:::\n\n## Solution\n\n::: {.solution exercise=\"facet_exmaple1\"}\n```{webr facet_example1-solution}\n#| exercise: facet_example1\n#| solution: true\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType))\n```\n\n\n```{webr facet_example1-check}\n#| exercise: facet_example1\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n::::\n\nAlright, looks like the x-axis labels are getting a little crowded.\n\nWe can't even read it!\n\n### Try again!\n\nNow, try it with `ncol=1` as an additional argument in `facet_wrap()`\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr facet_example2}\n#| exercise: facet_example2\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType)_______)\n```\n\n## Hint\n\n::: {.hint exercise=\"facet_example2\"}\nfunction starts with an *f*.\nAdditional arguments in a function are separated with a comma.\n:::\n\n## Solution\n\n::: {.solution exercise=\"facet_example2\"}\n```{webr facet_example2-solution}\n#| exercise: facet_example2\n#| solution: true\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType), ncol=1)\n```\n\n\n\n```{webr facet_example2-check}\n#| exercise: facet_example2\n#| solution: true\ngrade_this_code()\n```\n:::\n::::\n\n## Labels\n\nNow we can add more customization to the chart.\n\nTo make it really shine!\n\n<table>\n  <tr>\n    <th class=\"cell-left\">Example layer</th>\n    <th class=\"cell-left\">What it does</th>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">labs(title = \"Neat title\")</code></td>\n    <td class=\"cell-left\">Title</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">labs(caption = \"Something\")</td>\n    <td class=\"cell-left\">Caption</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">labs(y = \"Something\")</td>\n    <td class=\"cell-left\">y-axis</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">labs(color = \"Type\")</code></td>\n    <td class=\"cell-left\">Title of size legend</td>\n  </tr>\n</table>\n\n* Title should be \"Disaster declarations since 2010\"\n* Label for the x-axis should be blank (aka \"\") because the years are obvious\n* Label for the y-axis should be \"Total\"\n* Caption should be \"Data: FEMA\"\n\nAdd those labels below:\n\n::: {.panel-tabset}\n\n## Example\n\n```{webr labels_example}\n#| exercise: labels_example\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType), ncol=1) +\n  labs(\n    \n    \n    \n    \n  )\n```\n\n## Hint\n\n::: {.hint exercise=\"labels_example\"}\nYou only need to call labs() once.\nWithin parentheses, just separate the arguments with commas. You don't use the plus signs.\n:::\n\n## Solution\n\n::: {.solution exercise=\"labels_example\"}\n```{webr labels_example-solution}\n#| exercise: labels_example\n#| solution: true\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType), ncol=1) +\n  labs(\n    title = \"Disaster declarations since 2010\",\n    x = \"\",\n    y = \"Total\",\n    caption= \"Data: FEMA\"\n  )\n```\n\n\n```{webr labels_example-check}\n#| exercise: labels_example\n#| check: true\ngradethis::grade_this_code()\n```\n\n:::\n::::\n\n## Themes\n\nChange the appearance of anything in the plot.\n\nWhile you can customize every font, color, gradient, etc, you can set these styles up ahead of time or use the ones others have created.\n\nThere are many built-in themes.\n\n\n<table>\n  <tr>\n    <th class=\"cell-left\">Example layer</th>\n    <th class=\"cell-left\">What it does</th>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">theme_grey()</code></td>\n    <td class=\"cell-left\">Default grey background</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">theme_bw()</td>\n    <td class=\"cell-left\">Black and white</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">theme_dark()</td>\n    <td class=\"cell-left\">Dark</td>\n  </tr>\n  <tr>\n    <td class=\"cell-left\"><code class=\"remark-inline-code\">theme_minimal()</code></td>\n    <td class=\"cell-left\">Minimal</td>\n  </tr>\n</table>\n\nTry out the different themes listed above in the code below.\n\n\n```{webr themes-example}\n#| exercise: themes-example\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType), ncol=1) +\n  labs(\n    title = \"Disaster declarations since 2010\",\n    x = \"\",\n    y = \"Total\",\n    caption= \"Data: FEMA\"\n  ) +\n  theme______()\n```\n\n### More themes\n\nThere are a collections of pre-built themes online, like the [ggthemes package](https://jrnold.github.io/ggthemes/).\n\nOrganizations often make their own custom themes, like [the BBC](https://bbc.github.io/rcookbook/).\n\n\n![](images/bbc-cookbook.png)\n\n### Theme adjustments\n\nMake theme adjustments with `theme()`\n\nThere are a billion options here!\n\nAdd this chunk of code in the exercise below it:\n\n```{r eval=F}\ntheme_bw() + \ntheme(plot.title = element_text(face = \"bold\"),\n      panel.grid = element_blank(),\n      axis.title.y = element_text(face = \"italic\"))\n```\n\n### Exercise 5\n\n```{webr themes_example2}\n#| exercise: themes_example2\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType), ncol=1) +\n  labs(\n    title = \"Disaster declarations since 2010\",\n    x = \"\",\n    y = \"Total\",\n    caption= \"Data: FEMA\"\n  ) +\n\n# copy and paste the chunk of code above this chunk into the line above this one\n```\n\n\n```{webr themes_example2-solution}\n#| exercise: themes_example2\n#| solution: true\nannual_disasters |> \n  filter(incidentType %in% c(\"Hurricane\", \"Fire\", \"Flood\")) |> \nggplot() +\n  geom_col(mapping=aes(x= year, y= total)) +\n  scale_x_continuous(limits=c(2010, 2022), breaks=2010:2022) +\n  facet_wrap(vars(incidentType), ncol=1) +\n  labs(\n    title = \"Disaster declarations since 2010\",\n    x = \"\",\n    y = \"Total\",\n    caption= \"Data: FEMA\"\n  ) +\n  theme_bw() + \n  theme(plot.title = element_text(face = \"bold\"),\n        panel.grid = element_blank(),\n        axis.title.y = element_text(face = \"italic\"))\n```\n\n```{webr themes_example2-code-check}\n#| exercise: themes_example2\n#| check: true\ngradethis::grade_this_code()\n```\n\n\nThese were just a few examples of layers.\n\n![](images/ggplot5.png){fig-align=\"center\" width=50%}\n\n\nSee the [ggplot2 documentation](https://ggplot2.tidyverse.org/reference/index.html) for complete examples of everything you can do\n\n### Done!\n"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/Users/andrewtran/Projects/chjr/_extensions/r-wasm/live/live.lua"],"output-file":"viz.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","ojs-engine":true,"revealjs-plugins":[],"theme":{"light":"cosmo","dark":"darkly"},"title":"Visualizing data","webr":{"packages":["readr","dplyr","lubridate","tidyr","ggplot2","stringr","janitor","readxl","gradethis","DT","knitr"]},"resources":["images","data"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}