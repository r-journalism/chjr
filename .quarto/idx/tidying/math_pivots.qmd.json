{"title":"Pivoting data","markdown":{"yaml":{"title":"Pivoting data","engine":"knitr","format":"live-html","webr":{"packages":["readr","lubridate","tidyr","dplyr","gradethis","readxl","janitor","stringr"]},"resources":["images","data"]},"headingText":"tidyr","containsRefs":false,"markdown":"\n\n{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}\n{{< include ../_extensions/r-wasm/live/_gradethis.qmd >}}\n\n\n```{webr 2}\n#| include: false\n#| \n\n#designations <- readxl::read_excel(tf1)\n#df <- read_csv(\"https://www.fema.gov/api/open/v2/DisasterDeclarationsSummaries.csv\")\ndf <- read_csv(\"data/DisasterDeclarationsSummaries.csv\")\ncounty_pop <- read_csv(\"data/county_population.csv\")\n#county_pop <- read_csv(\"https://www.andrewbatran.com/data/county_population.csv\")\n\ndf_new <- df |> \n  mutate(GEOID=str_c(fipsStateCode, fipsCountyCode))\n\njoined_new <- left_join(df_new, county_pop, by=\"GEOID\")\n\n\nlong_flood <- joined_new |> \n  #filter(state==\"KY\") |> \n  filter(incidentType==\"Flood\") |> \n  mutate(year=year(incidentBeginDate)) |> \n  # extracting months\n  mutate(month=month(incidentBeginDate)) |> \n  # only paying attention to months in current year of data set\n  filter(month %in% c(1:8)) |> \n  filter(year==2020 | year==2021 | year==2022) |> \n  group_by(year, state) |> \n  summarize(declarations=n(),\n            avg_pop=mean(estimate, na.rm=T),\n            median_pop=median(estimate, na.rm=T))\n\nwide_flood <- long_flood |> \n  pivot_wider(names_from=\"year\",\n              values_from=\"declarations\")\n\n\nfires_wide <- joined_new |> \n  filter(incidentType==\"Fire\") |> \n  mutate(year=year(incidentBeginDate)) |> \n  count(year, NAME) |> \n  filter(!is.na(NAME)) |> \n  pivot_wider(names_from=\"year\", values_from=n)\n```\n\n```{webr 3}\n#| edit: false\n#| output: false\n#| define:\n#|   - ok_reponse\nlibrary(htmltools)\nok_reponse <- function(reponse, n) {\n  if (is.na(reponse)) HTML(\"\")\n  else if (reponse == n) div(HTML(\"Correct ✓\"), style = \"color: green\")\n  else div(HTML(\"Incorrect ✗\"), style = \"color: red\")\n}\n```\n\n\n\nYou need to understand the basics of math to tell a story.\n\nLet's say you're looking at this data because some local disaster occurred and you want to answer the question:\n\n* Are things worse now than they were before? \n* Which place has it worst and most recently? \n  * Because you can go visit that place and find victims to anchor the story narratively\n  \nBeing able to come up with types of questions and answer them yourself using raw data will help you stand apart from the competition. \n\nBecause you're working with raw data intended for use by an agency for one thing, you'll need to be able to reshape the data so you can do your own analysis, which will include math (such as difference, percents, percent change, and per capita).\n\nOne advanced technique for transforming data you'll learn in this section is from the **tidyr** package.\n\n* `pivot_wider()`\n* `pivot_longer()`\n\nNow, these used to be called `gather()` and `spread()` but the language is a bit clearer now.\n\nPivots in R mean something else entirely than pivots in Excel.\n\nIn Excel, pivot tables are used to group and summarize data.\n\nIn R, you pivot data as in you reshape it. This way you can do math easier across all rows.\n\nHere's how it works (pay attention to the colors):\n\n```{r pivot-image1, out.width = \"400px\", echo=F, eval=F}\nknitr::include_graphics(\"images/original-dfs-tidy.png\")\n```\n\n\n```{r pivot-image2, out.width = \"400px\", echo=F}\nknitr::include_graphics(\"images/tidyr-pivoting.gif\")\n```\n\nLet's start with this data that we last ended up with. \n\nBut this time comment comment out the second line so we include all states with floods this time.\n\nAnd in the 10th line, add \"state\" as a second argument in the `group_by()` option after \"year\".\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr what}\n#| exercise: what\nlong_flood <- joined_new |> \n  filter(incidentType==\"Flood\") |> \n  mutate(year=year(incidentBeginDate)) |> \n  # extracting months\n  mutate(month=month(incidentBeginDate)) |> \n  # only paying attention to months in current year of data set\n  filter(month %in% c(1:8)) |> \n  filter(year==2020 | year==2021 | year==2022) |> \n  group_by(year) |> \n  summarize(declarations=n(),\n            avg_pop=mean(estimate, na.rm=T),\n            median_pop=median(estimate, na.rm=T))\n\nlong_flood\n```\n\n## Hint\n\n::: {.hint exercise=\"what\"}\nUse a # to comment out.\nAlso, you don't need quotations around column names in\ngroup_by() unless there's a space in the column names.\nMultiple arguments in group_by() are separated by a comma.\n:::\n\n## Solution\n\n::: {.solution exercise=\"what\"}\n```{webr what-solution}\n#| exercise: solution\n#| solution: true\nlong_flood <- joined_new |> \n  filter(incidentType==\"Flood\") |> \n  mutate(year=year(incidentBeginDate)) |> \n  # extracting months\n  mutate(month=month(incidentBeginDate)) |> \n  # only paying attention to months in current year of data set\n  filter(month %in% c(1:8)) |> \n  filter(year==2020 | year==2021 | year==2022) |> \n  group_by(year, state) |> \n  summarize(declarations=n(),\n            avg_pop=mean(estimate, na.rm=T),\n            median_pop=median(estimate, na.rm=T))\n\nlong_flood\n```\n\n\n```{webr what-check}\n#| exercise: what\n#| check: true\ngradethis::grade_this_code()\n```\n\n:::\n::::\n\nOkay, we have tidy data! Each variable is in its own column. Each case is in its own row and each value is in its own cell.\n\nThis makes it easier to mutate and manipulate (and is also the preferable data structure for most data viz tools).\n\nHowever, if we wanted to compare 2020 declaration counts to 2021 and 2022 in each state, that would be difficult.\n\n## pivot_wider()\n\nSo we need to turn this long data into wide data using `pivot_wider()`\n\nYou need to identify what column you want to pull the new column names from and which column the values are stored in (\"year\" and \"declarations\" respectively. In this specific circumstance (\"pivot_\") you'll need to put the column names in quotation marks.\n\nWe'll also need to drop the `avg_pop` and `median_pop` columns or else the pivot will fail.\n\nTo drop columns, you use the `-` subtract sign in the `select()` function.\n\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr pivot_wider}\n#| exercise: pivot_wider\nwide_flood <- long_flood |> \n  select(-avg_pop, -median_pop) |> \n  pivot_wider(names_from=\"____\",\n              values_from=\"____________\")\n\nwide_flood\n```\n\n## Hint\n\n::: {.hint exercise=\"pivot_wider\"}\nIn this instance, you do need to put the column names in quotation marks.\n:::\n\n## Solution\n\n::: {.solution exercise=\"pivot_wider\"}\n```{webr pivot_wider-solution}\n#| exercise: pivot_wider\n#| solution: true\nwide_flood <- long_flood |> \n  select(-avg_pop, -median_pop) |> \n  pivot_wider(names_from=\"year\",\n              values_from=\"declarations\")\n\nwide_flood\n```\n\n\n```{webr pivot_wider-check}\n#| exercise: pivot_wider\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n::::\n\nGreat job! We can clearly see most states had flooding in only one year. \n\nKentucky had 50 in 2021 and 20 in 2022 (Okay, the number may change in 2022 depending on when you pull this data and how unlucky Kentucky continues to be). \n\nWe knew that from our last section but now we can see that it's the only state that had floods in both years.\n\nBut we can now answer one of our questions:\n\n* Which place has it worst and most recently? \n\nIf you paginate through the results you'll see one state in particular went from no floods in 2021 to 19 in 2022.\n\nNext, we can use `summarize()` and `mutate()` to do some math to answer our first question:\n\n* Are things worse now than they were before? \n\nNote: Because the column names we care about starts with a number, we need to surround the column names ``like `this` in the code.`` The key to the left of the `1` on the keyboard. This is also what you'd have to do if the column names had spaces in them.\n\nAdd up all the floods by year with summarize and then add a column that calculates the percent change between 2022 and 2021.\n\nDon't forget to add the argument that ignores any `NA` values in the `sum()` formula.\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr wide_flood_summary}\n#| exercise: wide_flood_summary\nflood_percent_change <- wide_flood |> \n  summarize(`2020`=sum(______, _____=T),\n            `2021`=sum(______, _____=T),\n            `2022`=sum(______, _____=T)) |> \n  ______(percent_change=(round((`____`-`____`)/`____`*100,1)))\n\nflood_percent_change\n```\n\n## Hint\n\n::: {.hint exercise=\"wide_flood_summary\"}\nThe formula for percent change is (new-old)/old*100. Also remember the differences between aggregating a data frame and adding a column to an existing data frame.\n:::\n\n## Solution\n\n::: {.solution exercise=\"wide_flood_summary\"}\n```{webr wide_flood_summary-solution}\n#| exercise: wide_flood_summary\n#| solution: true\nflood_percent_change <- wide_flood |> \n  summarize(`2020`=sum(`2020`, na.rm=T),\n            `2021`=sum(`2021`, na.rm=T),\n            `2022`=sum(`2022`, na.rm=T)) |> \n  mutate(percent_change=(round((`2022`-`2021`)/`2021`*100,1)))\n\nflood_percent_change\n```\n\n```{webr wide_flood_summary-check}\n#| exercise: wide_flood_summary\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n::::\n\n## pivot_wider() multiple\n\nWhat's really powerful about `pivot_wider()` is the option to be able to draw values from more than one column.\n\nAdjust the code below:\n\n1. Delete the `-avg_pop` argument in line 2 (and the comma)\n2. in `values_from`, instead of \"declarations\" type in `c(\"declarations\", \"avg_pop\")\n\nSee what happens. *Also, type it in, don't copy and paste otherwise you'll run into syntax issues.*\n\n::: {.panel-tabset}\n\n## Exercise\n```{webr pivot_wider_more}\n#| exercise: pivot_wider_more\nwide_flood_more <- long_flood |> \n  select(-avg_pop, -median_pop) |> \n  pivot_wider(names_from=\"year\",\n              values_from=\"declarations\")\n\nwide_flood_more\n```\n\n## Hint\n\n::: {.hint exercise=\"pivot_wider_more\"}\nBe careful about syntax.\nAlso, you still want to pull names from \"year\"\n:::\n\n## Solution\n\n::: {.solution exercise=\"pivot_wider_more\"}\n```{webr pivot_wider_more-solution}\n#| exercise: pivot_wider_more\n#| solution: true\nwide_flood_more <- long_flood |> \n  select(-median_pop) |> \n  pivot_wider(names_from=\"year\",\n              values_from=c(\"declarations\", \"avg_pop\"))\n\nwide_flood_more\n```\n\n\n```{webr pivot_wider_more-check}\n#| exercise: pivot_wider_more\n#| solution: true\ngradethis::grade_this_code()\n```\n\n:::\n::::\n\nYou'll have to paginate a bit but you can see that the declarations and average are now prefixes to the `_2021` etc years.\n\nYou could also bring in the median values this way if you want.\n\nOkay, now that we know how to make long data to wide, let's convert wide data to long.\n\n## pivot_longer()\n\nSometimes you'll get data that looks like this:\n\n```{webr fire_data}\nfires_wide\n```\n\nThese are the declared fire disasters in each county since 1956.\n\nA state or column in one row and every column after is a different year of data.\n\nThis is not tidy data. Every year should be its own row. This is fine if we want to calculate changes between individual years.\n\nBut if we wanted to visualize this, we'd need to transform it long.\n\nWe want to increase the number of rows and decrease the number of columns.\n\nWe'll use the `pivot_longer()` function which needs:\n\n1. What columns to focus on `cols=`\n2. What to name the column with the names of the columns `names_to=`\n3. What to name the column with the values `values_to=`\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr pivot_longer}\n#| exercise: pivot_longer\n# We could do cols=`1967`:`2022`\n# or we could do the number of columns in the dataframe as in cols=2:41\n# let's do the first option in this one\n\nfires_wide |> \n  pivot_______(cols=_____________,\n               _____to=\"year\",\n               _______to=\"declarations\")\n  \n```\n\n## Hint\n\n::: { .hint exercise=\"pivot_longer\"}\nMake sure you name the arguments correctly.\n:::\n\n## Solution\n\n::: { .solution exercise=\"pivot_longer\"}\n\n```{webr pivot_longer-solution}\n#| exercise: pivot_longer\n#| solution: true\nfires_wide |> \n  pivot_longer(cols=`1967`:`2022`,\n               names_to=\"year\",\n               values_to=\"declarations\")\n```\n\n```{webr pivot_longer-check}\n#| exercise: pivot_longer\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n::::\n\nAlright! We did it!\n\nYou now have a handle on all the biggest verbs used to wrangle and transform data.\n\nThere are many more functions that do more specific things, of course.\n\nBut this will hopefully get you started on your way. Everything else you may have questions on how to do has probably been asked and answered out in the R online community.\n","srcMarkdownNoYaml":"\n\n{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}\n{{< include ../_extensions/r-wasm/live/_gradethis.qmd >}}\n\n\n```{webr 2}\n#| include: false\n#| \n\n#designations <- readxl::read_excel(tf1)\n#df <- read_csv(\"https://www.fema.gov/api/open/v2/DisasterDeclarationsSummaries.csv\")\ndf <- read_csv(\"data/DisasterDeclarationsSummaries.csv\")\ncounty_pop <- read_csv(\"data/county_population.csv\")\n#county_pop <- read_csv(\"https://www.andrewbatran.com/data/county_population.csv\")\n\ndf_new <- df |> \n  mutate(GEOID=str_c(fipsStateCode, fipsCountyCode))\n\njoined_new <- left_join(df_new, county_pop, by=\"GEOID\")\n\n\nlong_flood <- joined_new |> \n  #filter(state==\"KY\") |> \n  filter(incidentType==\"Flood\") |> \n  mutate(year=year(incidentBeginDate)) |> \n  # extracting months\n  mutate(month=month(incidentBeginDate)) |> \n  # only paying attention to months in current year of data set\n  filter(month %in% c(1:8)) |> \n  filter(year==2020 | year==2021 | year==2022) |> \n  group_by(year, state) |> \n  summarize(declarations=n(),\n            avg_pop=mean(estimate, na.rm=T),\n            median_pop=median(estimate, na.rm=T))\n\nwide_flood <- long_flood |> \n  pivot_wider(names_from=\"year\",\n              values_from=\"declarations\")\n\n\nfires_wide <- joined_new |> \n  filter(incidentType==\"Fire\") |> \n  mutate(year=year(incidentBeginDate)) |> \n  count(year, NAME) |> \n  filter(!is.na(NAME)) |> \n  pivot_wider(names_from=\"year\", values_from=n)\n```\n\n```{webr 3}\n#| edit: false\n#| output: false\n#| define:\n#|   - ok_reponse\nlibrary(htmltools)\nok_reponse <- function(reponse, n) {\n  if (is.na(reponse)) HTML(\"\")\n  else if (reponse == n) div(HTML(\"Correct ✓\"), style = \"color: green\")\n  else div(HTML(\"Incorrect ✗\"), style = \"color: red\")\n}\n```\n\n\n## tidyr\n\nYou need to understand the basics of math to tell a story.\n\nLet's say you're looking at this data because some local disaster occurred and you want to answer the question:\n\n* Are things worse now than they were before? \n* Which place has it worst and most recently? \n  * Because you can go visit that place and find victims to anchor the story narratively\n  \nBeing able to come up with types of questions and answer them yourself using raw data will help you stand apart from the competition. \n\nBecause you're working with raw data intended for use by an agency for one thing, you'll need to be able to reshape the data so you can do your own analysis, which will include math (such as difference, percents, percent change, and per capita).\n\nOne advanced technique for transforming data you'll learn in this section is from the **tidyr** package.\n\n* `pivot_wider()`\n* `pivot_longer()`\n\nNow, these used to be called `gather()` and `spread()` but the language is a bit clearer now.\n\nPivots in R mean something else entirely than pivots in Excel.\n\nIn Excel, pivot tables are used to group and summarize data.\n\nIn R, you pivot data as in you reshape it. This way you can do math easier across all rows.\n\nHere's how it works (pay attention to the colors):\n\n```{r pivot-image1, out.width = \"400px\", echo=F, eval=F}\nknitr::include_graphics(\"images/original-dfs-tidy.png\")\n```\n\n\n```{r pivot-image2, out.width = \"400px\", echo=F}\nknitr::include_graphics(\"images/tidyr-pivoting.gif\")\n```\n\nLet's start with this data that we last ended up with. \n\nBut this time comment comment out the second line so we include all states with floods this time.\n\nAnd in the 10th line, add \"state\" as a second argument in the `group_by()` option after \"year\".\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr what}\n#| exercise: what\nlong_flood <- joined_new |> \n  filter(incidentType==\"Flood\") |> \n  mutate(year=year(incidentBeginDate)) |> \n  # extracting months\n  mutate(month=month(incidentBeginDate)) |> \n  # only paying attention to months in current year of data set\n  filter(month %in% c(1:8)) |> \n  filter(year==2020 | year==2021 | year==2022) |> \n  group_by(year) |> \n  summarize(declarations=n(),\n            avg_pop=mean(estimate, na.rm=T),\n            median_pop=median(estimate, na.rm=T))\n\nlong_flood\n```\n\n## Hint\n\n::: {.hint exercise=\"what\"}\nUse a # to comment out.\nAlso, you don't need quotations around column names in\ngroup_by() unless there's a space in the column names.\nMultiple arguments in group_by() are separated by a comma.\n:::\n\n## Solution\n\n::: {.solution exercise=\"what\"}\n```{webr what-solution}\n#| exercise: solution\n#| solution: true\nlong_flood <- joined_new |> \n  filter(incidentType==\"Flood\") |> \n  mutate(year=year(incidentBeginDate)) |> \n  # extracting months\n  mutate(month=month(incidentBeginDate)) |> \n  # only paying attention to months in current year of data set\n  filter(month %in% c(1:8)) |> \n  filter(year==2020 | year==2021 | year==2022) |> \n  group_by(year, state) |> \n  summarize(declarations=n(),\n            avg_pop=mean(estimate, na.rm=T),\n            median_pop=median(estimate, na.rm=T))\n\nlong_flood\n```\n\n\n```{webr what-check}\n#| exercise: what\n#| check: true\ngradethis::grade_this_code()\n```\n\n:::\n::::\n\nOkay, we have tidy data! Each variable is in its own column. Each case is in its own row and each value is in its own cell.\n\nThis makes it easier to mutate and manipulate (and is also the preferable data structure for most data viz tools).\n\nHowever, if we wanted to compare 2020 declaration counts to 2021 and 2022 in each state, that would be difficult.\n\n## pivot_wider()\n\nSo we need to turn this long data into wide data using `pivot_wider()`\n\nYou need to identify what column you want to pull the new column names from and which column the values are stored in (\"year\" and \"declarations\" respectively. In this specific circumstance (\"pivot_\") you'll need to put the column names in quotation marks.\n\nWe'll also need to drop the `avg_pop` and `median_pop` columns or else the pivot will fail.\n\nTo drop columns, you use the `-` subtract sign in the `select()` function.\n\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr pivot_wider}\n#| exercise: pivot_wider\nwide_flood <- long_flood |> \n  select(-avg_pop, -median_pop) |> \n  pivot_wider(names_from=\"____\",\n              values_from=\"____________\")\n\nwide_flood\n```\n\n## Hint\n\n::: {.hint exercise=\"pivot_wider\"}\nIn this instance, you do need to put the column names in quotation marks.\n:::\n\n## Solution\n\n::: {.solution exercise=\"pivot_wider\"}\n```{webr pivot_wider-solution}\n#| exercise: pivot_wider\n#| solution: true\nwide_flood <- long_flood |> \n  select(-avg_pop, -median_pop) |> \n  pivot_wider(names_from=\"year\",\n              values_from=\"declarations\")\n\nwide_flood\n```\n\n\n```{webr pivot_wider-check}\n#| exercise: pivot_wider\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n::::\n\nGreat job! We can clearly see most states had flooding in only one year. \n\nKentucky had 50 in 2021 and 20 in 2022 (Okay, the number may change in 2022 depending on when you pull this data and how unlucky Kentucky continues to be). \n\nWe knew that from our last section but now we can see that it's the only state that had floods in both years.\n\nBut we can now answer one of our questions:\n\n* Which place has it worst and most recently? \n\nIf you paginate through the results you'll see one state in particular went from no floods in 2021 to 19 in 2022.\n\nNext, we can use `summarize()` and `mutate()` to do some math to answer our first question:\n\n* Are things worse now than they were before? \n\nNote: Because the column names we care about starts with a number, we need to surround the column names ``like `this` in the code.`` The key to the left of the `1` on the keyboard. This is also what you'd have to do if the column names had spaces in them.\n\nAdd up all the floods by year with summarize and then add a column that calculates the percent change between 2022 and 2021.\n\nDon't forget to add the argument that ignores any `NA` values in the `sum()` formula.\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr wide_flood_summary}\n#| exercise: wide_flood_summary\nflood_percent_change <- wide_flood |> \n  summarize(`2020`=sum(______, _____=T),\n            `2021`=sum(______, _____=T),\n            `2022`=sum(______, _____=T)) |> \n  ______(percent_change=(round((`____`-`____`)/`____`*100,1)))\n\nflood_percent_change\n```\n\n## Hint\n\n::: {.hint exercise=\"wide_flood_summary\"}\nThe formula for percent change is (new-old)/old*100. Also remember the differences between aggregating a data frame and adding a column to an existing data frame.\n:::\n\n## Solution\n\n::: {.solution exercise=\"wide_flood_summary\"}\n```{webr wide_flood_summary-solution}\n#| exercise: wide_flood_summary\n#| solution: true\nflood_percent_change <- wide_flood |> \n  summarize(`2020`=sum(`2020`, na.rm=T),\n            `2021`=sum(`2021`, na.rm=T),\n            `2022`=sum(`2022`, na.rm=T)) |> \n  mutate(percent_change=(round((`2022`-`2021`)/`2021`*100,1)))\n\nflood_percent_change\n```\n\n```{webr wide_flood_summary-check}\n#| exercise: wide_flood_summary\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n::::\n\n## pivot_wider() multiple\n\nWhat's really powerful about `pivot_wider()` is the option to be able to draw values from more than one column.\n\nAdjust the code below:\n\n1. Delete the `-avg_pop` argument in line 2 (and the comma)\n2. in `values_from`, instead of \"declarations\" type in `c(\"declarations\", \"avg_pop\")\n\nSee what happens. *Also, type it in, don't copy and paste otherwise you'll run into syntax issues.*\n\n::: {.panel-tabset}\n\n## Exercise\n```{webr pivot_wider_more}\n#| exercise: pivot_wider_more\nwide_flood_more <- long_flood |> \n  select(-avg_pop, -median_pop) |> \n  pivot_wider(names_from=\"year\",\n              values_from=\"declarations\")\n\nwide_flood_more\n```\n\n## Hint\n\n::: {.hint exercise=\"pivot_wider_more\"}\nBe careful about syntax.\nAlso, you still want to pull names from \"year\"\n:::\n\n## Solution\n\n::: {.solution exercise=\"pivot_wider_more\"}\n```{webr pivot_wider_more-solution}\n#| exercise: pivot_wider_more\n#| solution: true\nwide_flood_more <- long_flood |> \n  select(-median_pop) |> \n  pivot_wider(names_from=\"year\",\n              values_from=c(\"declarations\", \"avg_pop\"))\n\nwide_flood_more\n```\n\n\n```{webr pivot_wider_more-check}\n#| exercise: pivot_wider_more\n#| solution: true\ngradethis::grade_this_code()\n```\n\n:::\n::::\n\nYou'll have to paginate a bit but you can see that the declarations and average are now prefixes to the `_2021` etc years.\n\nYou could also bring in the median values this way if you want.\n\nOkay, now that we know how to make long data to wide, let's convert wide data to long.\n\n## pivot_longer()\n\nSometimes you'll get data that looks like this:\n\n```{webr fire_data}\nfires_wide\n```\n\nThese are the declared fire disasters in each county since 1956.\n\nA state or column in one row and every column after is a different year of data.\n\nThis is not tidy data. Every year should be its own row. This is fine if we want to calculate changes between individual years.\n\nBut if we wanted to visualize this, we'd need to transform it long.\n\nWe want to increase the number of rows and decrease the number of columns.\n\nWe'll use the `pivot_longer()` function which needs:\n\n1. What columns to focus on `cols=`\n2. What to name the column with the names of the columns `names_to=`\n3. What to name the column with the values `values_to=`\n\n::: {.panel-tabset}\n\n## Exercise\n\n```{webr pivot_longer}\n#| exercise: pivot_longer\n# We could do cols=`1967`:`2022`\n# or we could do the number of columns in the dataframe as in cols=2:41\n# let's do the first option in this one\n\nfires_wide |> \n  pivot_______(cols=_____________,\n               _____to=\"year\",\n               _______to=\"declarations\")\n  \n```\n\n## Hint\n\n::: { .hint exercise=\"pivot_longer\"}\nMake sure you name the arguments correctly.\n:::\n\n## Solution\n\n::: { .solution exercise=\"pivot_longer\"}\n\n```{webr pivot_longer-solution}\n#| exercise: pivot_longer\n#| solution: true\nfires_wide |> \n  pivot_longer(cols=`1967`:`2022`,\n               names_to=\"year\",\n               values_to=\"declarations\")\n```\n\n```{webr pivot_longer-check}\n#| exercise: pivot_longer\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n::::\n\nAlright! We did it!\n\nYou now have a handle on all the biggest verbs used to wrangle and transform data.\n\nThere are many more functions that do more specific things, of course.\n\nBut this will hopefully get you started on your way. Everything else you may have questions on how to do has probably been asked and answered out in the R online community.\n"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/Users/andrewtran/Projects/chjr/_extensions/r-wasm/live/live.lua"],"output-file":"math_pivots.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","ojs-engine":true,"revealjs-plugins":[],"theme":{"light":"cosmo","dark":"darkly"},"title":"Pivoting data","webr":{"packages":["readr","lubridate","tidyr","dplyr","gradethis","readxl","janitor","stringr"]},"resources":["images","data"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}