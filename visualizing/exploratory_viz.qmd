---
title: Exploratory data visualization
engine: knitr
format: live-html
webr:
  packages:
    - readr
    - dplyr
    - lubridate
    - tidyr
    - ggplot2
    - stringr
    - janitor
    - readxl
    - gradethis
    - DT
    - knitr
    - gradethis
    - readxl
    - DT
    - janitor
resources:
  - images
  - data
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}
{{< include ../_extensions/r-wasm/live/_gradethis.qmd >}}


```{webr 2}
#| include: false


sd <- read_csv("data/san_diego.csv")

sd <- clean_names(sd)


sd_adjusted <- sd |> 
  mutate(death_date=mdy(death_date)) |> 
  mutate(month=month(death_date, label=TRUE, abbr=TRUE)) 

sd_month <- sd_adjusted |> 
  count(year, month, manner_of_death, name="deaths") |> 
  mutate(date=mdy(paste0(month, " 1, ", year)))

scented <- read_excel("data/Scented_all.xlsx", sheet=1)
unscented <- read_excel("data/Unscented_all.xlsx", sheet=1)

scented <- scented |> 
  mutate(type="scented")
  
unscented <- unscented |> 
  mutate(type="unscented")

scented <- bind_rows(scented, unscented)

scented_summary <- scented |>
  arrange(Date) |>
  filter(Date >= "2017-01-01") |>
  mutate(Date=ymd(Date)) |> 
  filter(CandleID <= 3) |>
  group_by(Date, type) |>
  summarise(Average_Rating=mean(Rating),
            Reviews=n())
  
sd_year <- sd_adjusted |> 
  # if we're going to compare this year to previous years, we need to exclude data we don't have yet
  filter(!month %in% c("Oct", "Nov", "Dec")) |> 
  count(year, manner_of_death, name="deaths") 

sd_group <- sd_adjusted |> 
  filter(!month %in% c("Oct", "Nov", "Dec")) |> 
  count(year, month, manner_of_death, name="deaths") |> 
  mutate(year_type=case_when(
    year==2020 ~ "2020",
    TRUE ~ "1997-2019"
  )) |> 
  group_by(month, manner_of_death, year_type) |> 
  summarize(avg_deaths=mean(deaths, na.rm=T)) |> 
  filter(!is.na(month))

sd_group_compare <- sd_adjusted |> 
  filter(!month %in% c("Sep", "Oct", "Nov", "Dec")) |> 
  count(year, manner_of_death, name="deaths") |> 
  mutate(year_type=case_when(
    year==2020 ~ "2020",
    TRUE ~ "1997-2019"
  )) |> 
  group_by(manner_of_death, year_type) |> 
  summarize(avg_deaths=round(mean(deaths, na.rm=T)))
```

```{webr 3}
#| edit: false
#| output: false
#| define:
#|   - ok_reponse
library(htmltools)
ok_reponse <- function(reponse, n) {
  if (is.na(reponse)) HTML("")
  else if (reponse == n) div(HTML("Correct ✓"), style = "color: green")
  else div(HTML("Incorrect ✗"), style = "color: red")
}
```


## Putting it all together

Usually we'd next go over all the different `geom_` visualizations you can create using a single data set.

* [A ggplot2 tutorial for beautiful plotting in R](https://cedricscherer.netlify.app/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/)

But we're going to use more real-life data that I think will be relevant to your journalism.

The data set is raw deaths data from San Diego. It's a combination of 1997-2019 data from San Diego's [data portal](https://data.sandiegocounty.gov/Safety/Medical-Examiner-Cases/jkvb-n4p7/data) and 2020 data from a public information request on [MuckRock](https://www.muckrock.com/foi/santa-clara-county-732/santa-clara-county-medical-examiner-coroner-case-details-104835/).

Downloads this data [san_diego.csv](https://github.com/utdata/chj-r-introduction/raw/main/chj-day4/san_diego.csv) and place it in your project folder.

Make sure you've got the proper libraries loaded.


### Ready for the code?


```{r sd1, eval=F}
library(tidyverse)
library(janitor)
library(lubridate)

sd <- read_csv("data/san_diego.csv")

sd <- clean_names(sd)

sd_adjusted <- sd |> 
  mutate(death_date=mdy(death_date)) |> 
  mutate(month=month(death_date, label=TRUE, abbr=TRUE)) 
```

```{webr view_sd}
sd_adjusted
```

Alright, I've cleaned it up for you.

There's some really great data here. It's got gender, race, and several levels of manner of death stretching back to 1997 and through possibly October of 2020.

Let's start summarizing the data so we can start looking for trends.

### Exercise 7

Can you `count` up the number of `deaths` by manner_of_death by month and year, please?

```{webr sd_month1}
#| exercise: sd_month1
sd_month <- sd_adjusted |> 
  _____(year, month, manner_of_death, name="______") |> 
  # we'll also add a new date column in the proper format for good charting
  mutate(date=mdy(paste0(month, " 1, ", year)))


sd_month
```


```{webr sd_month1-solution}
#| exercise: sd_month1
#| solution: true
sd_month <- sd_adjusted |> 
  count(year, month, manner_of_death, name="deaths") |> 
  mutate(date=mdy(paste0(month, " 1, ", year)))

sd_month
``` 

```{webr sd_month1-code-check}
#| exercise: sd_month1
#| check: true
gradethis::grade_this_code()
```

<div id="sd_month1-hint">
**Hint:** count / deaths
</div>

### Exercise 8

Now, fill in the blank below to create a line chart for each type of death

```{webr sd_month_viz}
#| exercise: sd_month_viz
#| fig.width: 8
sd_month |> 
  ggplot(aes(x=date, y=deaths, color=manner_of_death, group=manner_of_death)) +
  geom_____() +
  labs(title="Monthly deaths in San Diego",
       caption="Source; San Diego Medical Examiner")
```

```{webr sd_month_viz-solution}
#| exercise: sd_month_viz
#| solution: true
sd_month |> 
  ggplot(aes(x=date, y=deaths, color=manner_of_death, group=manner_of_death)) +
  geom_line() +
  labs(title="Monthly deaths in San Diego",
       caption="Source; San Diego Medical Examiner")
```

```{webr sd_month_viz-code-check}
#| exercise: sd_month_viz
#| check: true
gradethis::grade_this_code()
```

Alright, a little messy. We can see some overall growing trend in one category, but that's it. 

Perhaps looking at the data by month is too granular. Let's step back and aggregate by year.

### By year

I went ahead and created a new `sd_year` dataframe counting up the deaths by year (while excluding October, November, and December) so we can compare prior years to this year.

```{webr sd_year_data}
sd_year <- sd_adjusted |> 
  # if we're going to compare this year to previous years, we need to exclude data we don't have yet
  filter(!month %in% c("Oct", "Nov", "Dec")) |> 
  count(year, manner_of_death, name="deaths") 

datatable(sd_year)
```

### Exercise 9

Okay, your turn to make a chart.

Make me a faceted chart that breaks out all the individual **manner_of_death** into its own chart, small-multiple style.

```{webr sd_year_chart}
#| exercise: sd_year_chart
#| fig.width: 8
sd_year |> ggplot(aes(x=year, y=deaths)) +
  geom_col() +
  ______wrap(vars(_______________), ncol=4)
```


```{webr sd_year_chart-solution}
#| exercise: sd_year_chart
#| solution: true
sd_year |> ggplot(aes(x=year, y=deaths)) +
  geom_col() +
  facet_wrap(vars(manner_of_deaths), ncol=4)
```

```{webr sd_year_chart-code-check}
#| exercise: sd_year_chart
#| check: true
grade_code()
```


Alright, now we're getting somewhere. 

Looks like accidents have been trending up year over year.

If we focus on 2020, it looks like Natural causes have increased. But it also increased in 2019.

Suicides actually look down this year compared to prior years.

Hm...

What else can we do? 

We can try to measure **Excess Deaths**

Average each month by every year prior to 2020 and compare it to 2020's trend line.

I'll give you the code again.

We're going to use a function called `case_when` to create a new column called **year_type**. If the year is 2020, then it will be "2020" otherwise it will be "1997-2020". And then we find the average number of deaths for each month for those two groups.

```{webr sd_group}
#| warning: false
#| message: false
sd_group <- sd_adjusted |> 
  filter(!month %in% c("Oct", "Nov", "Dec")) |> 
  count(year, month, manner_of_death, name="deaths") |> 
  mutate(year_type=case_when(
    year==2020 ~ "2020",
    TRUE ~ "1997-2019"
  )) |> 
  group_by(month, manner_of_death, year_type) |> 
  summarize(avg_deaths=mean(deaths, na.rm=T)) |> 
  filter(!is.na(month))

datatable(sd_group)
```

Looking very smooth.

Let's chart it.

### Exercise 10

Can you please create a faceted line chart of the data above? But with year_type as two different lines?

Fill in the three blanks to generate the chart.

```{webr sd_group_viz}
#| exercise: sd_group_viz
#| fig.width: 8
#| fig.height: 5
ggplot(sd_group, aes(x=_____, y=__________, color=year_type, group=year_type)) +
  geom_____() +
  facet_wrap(vars(manner_of_death), scales="free_y", ncol=2)
```

```{webr sd_group_viz-solution}
#| exercise: sd_group_viz
#| solution: true
ggplot(sd_group, aes(x=month, y=avg_deaths, color=year_type, group=year_type)) +
  geom_line() +
  facet_wrap(vars(manner_of_death), scales="free_y", ncol=2)
```

Great.

Now there's some interesting trend in July and August, right?

And it shows that maybe the last month of data is so low. It's possible that the data for the month is incomplete and should be excluded from analysis.

**How about we come up with a number for the nutgraf of a story?**

How many more accidental cause deaths are there in 2020 compared to the historical average?

*Exclude September since it seems so off*

Here's a look at the dataframe you can estimate this with.

```{webr glimpse}
datatable(sd_group)
```

What code do you put below to fill out this sentence:

"There were X% more accidental deaths in 2020 so far than the historical average in San Diego"

*hint: you'll need filter(), pivot_wider(), group_by(), summarize(), mutate(), and math*

```{webr excess_deaths}
#| exercise: excess_deaths
sd_group |> 
  
```

Good job!

### Further exploratory visual analysis

Alright, comparing 2020 to the average from previous years seems to be a good decision.

Some interesting trends that we could actually write about are surfacing.

Let's compare that overall instead of by month.

Here's the code. We're also excluding September based on what we discovered in the chart above.

```{webr sd_group_compare}
sd_group_compare <- sd_adjusted |> 
  filter(!month %in% c("Sep", "Oct", "Nov", "Dec")) |> 
  count(year, manner_of_death, name="deaths") |> 
  mutate(year_type=case_when(
    year==2020 ~ "2020",
    TRUE ~ "1997-2019"
  )) |> 
  group_by(manner_of_death, year_type) |> 
  summarize(avg_deaths=round(mean(deaths, na.rm=T)))

datatable(sd_group_compare)
```


### Exercise 11

Run the code below with `manner_of_death` as x and `avg_deaths` as y.

Then swap them.

Which do you prefer and why?

```{webr sd_group_compare_chart}
#| exercise: sd_group_compare
ggplot(sd_group_compare, aes(x=________, y=______, fill=year_type)) +
  geom_bar(position="dodge", stat="identity") 
```


```{webr sd_group_compare_chart-solution}
#| exercise: sd_group_compare
#| solution: true
ggplot(sd_group_compare, aes(x=manner_of_death, y=avg_deaths, fill=year_type)) +
  geom_bar(position="dodge", stat="identity") 
```


```{webr sd_group_compare_chart-code-check}
#| exercise: sd_group_compare
#| check: true
gradethis::grade_this_code()
```


Alright, before we go, I want to clean things up some.

I want to get rid of the manners of death that have barely any and I want to reorder the labels so that it's in alphabetical order.

### Exercise 12

Take a look at the code below. Absorb it.

Then generate the code and see what pops up.

```{webr sd_group_compare_chart_new}
#| exercise: sd_group_compare_chart_new
sd_group_compare |> 
  filter(!manner_of_death %in% c("Other", "Family Paid Autopsy")) |> 
  filter(!is.na(manner_of_death)) |> 
  ggplot(aes(x=avg_deaths, y=forcats::fct_rev(manner_of_death),  fill=year_type)) +
  geom_bar(position="dodge", stat="identity") +
  labs(title="Manner of death in San Diego",
       subtitle="January and August deaths in 2020 compared to average deaths between 1997 and 2019",
       caption="Source: San Diego Medical Examiner",
       y="Manner of death",
       x="Average deaths",
       fill="Year") +
  theme_minimal()

```

### Story

So, what do you think the story is?

In San Diego, accidents are way up, suicides are slightly up, and meanwhile homicides are down.

What can we do next?

Well, dig into the accidents, perhaps, and see if there's any explanation for the huge increase.

Alright, congratulations on going on this exploratory data visualization journey.

Some of the answers won't appear right away unless you poke around and look at the data in as many ways as possible.
